syntax = "proto3";

package stroeer.core.v1;

import "google/protobuf/timestamp.proto";
import "stroeer/core/v1/shared.proto";

option go_package = "github.com/stroeer/tapir/go/stroeer/core/v1;core";
option java_multiple_files = true;
option java_package = "de.stroeer.core.v1";

// An article represents a piece of content created in the content management
// system. Different types of content like text or video articles share
// the same message structure distinguished by the `Article.type` field.
//
// Depending on the service used to retrieve an article, this message might
// only contain data required on section pages (e.g. with `Article.body` set to `null`
// thus not containing any data that is only required on detail pages). This is sometimes
// referred to as _Teaser_.
//
// Message fields and map entries are optional unless commented otherwise.
message Article {
  // Unique ID of the article defined by the content management system (required).
  int64 id = 1;

  // Main content type of the article.
  ContentType type = 2;

  // Subtype of the article. For `CONTENT_TYPE_ARTICLE` this field holds a
  // sub type, for others like `CONTENT_TYPE_GALLERY` it may not.
  ContentSubType sub_type = 3;

  // Hierarchical section tree information of the article (required).
  // For example:
  // `/` -> `/sport/` -> `/sport/fussball/`
  stroeer.core.v1.Reference section_tree = 4;

  // Generic map containing general content and configuration information of
  // the article (required).
  //
  // The entry set is defined by the content management system and
  // will vary depending on the main type of the article.
  //
  // For `CONTENT_TYPE_ARTICLE`, this map will always contain non empty values
  // for the following keys:
  //
  // * `ref_path`: URL path for this article e.g. /section/id_$ID/title.html
  // * `ref_canonical`: Canonical URL of this article, may differ if external, e.g. https://www.giga.de/external.html
  // * `ref_amp`: AMP URL of this article
  // * `headline`
  // * `top_line`
  // * `summary`
  //
  // For `CONTENT_TYPE_GALLERY`, this map will always contain non empty values
  // for the following keys:
  //
  // * headline
  //
  // Clients must be resilient to unknown or missing entry sets.
  map<string, string> fields = 5;

  // Recursive body structure of the article to render on detail
  // pages.
  //
  // This message will be empty for the teaser representation (e.g. section pages) of the article.
  Body body = 6;

  // Article metadata like publication state and technical timestamps.
  Metadata metadata = 7;

  // Elements of the article which are not part of the body, e.g. author information
  // opener image/video etc. Those elements should be used to render the article
  // as a teaser e.g. on section pages.
  repeated Element elements = 8;

  // Extracted entities from the article body like people, places, organizations etc.
  repeated string keywords = 9;

  // IDs of articles related to this article.
  //
  // Related articles are defined manually in the content management system
  // by the editorial department.
  repeated int64 onwards = 10;

  // Main content type of the article.
  enum ContentType {
    // Not specified.
    CONTENT_TYPE_UNSPECIFIED = 0;

    // A text article.
    ARTICLE = 1;

    // An image article (not available as standalone article).
    IMAGE = 2;

    // A video article.
    VIDEO = 3;

    // A gallery article.
    GALLERY = 4;

    // An oembed article.
    OEMBED = 5;

    // An author article (not available as standalone article).
    AUTHOR = 6;

    // An agency article (not available as standalone article).
    AGENCY = 7;
  }

  // Subtype of the article.
  enum ContentSubType {
    // Not specified.
    CONTENT_SUB_TYPE_UNSPECIFIED = 0;

    // Meldung/Nachricht — this is the default
    NEWS = 1;

    // 'Kolumne'
    COLUMN = 2;

    // 'Bericht'
    REPORT = 3;

    // 'Kommentar'
    COMMENTARY = 4;

    // 'Interview'
    INTERVIEW = 5;

    // 'Pro und Kontra/Streitgespräch'
    CONTROVERSY = 6;

    // 'Reportage'
    STORY = 7;

    // 'Rezension/Kritik'
    RECENSION = 8;

    // 'Tagesanbruch'
    TAGESANBRUCH = 9;

    // 'Analyse'
    ANALYSIS = 10;

    // 'Satire/Glosse'
    SATIRE = 11;

    // Content originally imported from agency/tickers by the CMS
    AGENCY_IMPORT = 12;
  }
}

// Article metadata like publication state and technical timestamps.
message Metadata {
  // State of the article in the content management system.
  State state = 1;

  // Manually set editorial timestamp ('Gültig von') at which the article is valid to deliver on
  // digital platforms in seconds of UTC time since Unix epoch.
  google.protobuf.Timestamp start_time = 2;

  // Manually set editorial date ('Gültig bis') till the article is valid to deliver on
  // digital platforms in seconds of UTC time since Unix epoch.
  google.protobuf.Timestamp end_time = 3;

  // Editorial date ('Publikationsdatum') of the first publication of the
  // article in seconds of UTC time since Unix epoch.
  //
  // This date will be set automatically by the content management system.
  google.protobuf.Timestamp publish_time = 4;

  // Editorial date ('Aktualisierungsdatum') at which the article
  // was updated in seconds of UTC time since Unix epoch.
  //
  // On first publication this timestamp matches `publish_time`. Afterwards
  // it's either updated manually in the content management system or
  // automatically if the article content changed significantly.
  google.protobuf.Timestamp update_time = 5;

  // Technical timestamp at which the article was transformed in the
  // API layer in seconds of UTC time since Unix epoch.
  google.protobuf.Timestamp transformation_time = 6;

  // Number of errors occurred while fetching and/or transforming optional
  // article components (e.g. embeds) to an `article` message.
  int64 transformation_errors = 7;

  // State of the article in the content management system.
  enum State {
    // Not specified.
    STATE_UNSPECIFIED = 0;

    // A published article.
    PUBLISHED = 1;
  }
}

// Elements of the article which are not part of the body, e.g. author information
// opener image/video etc. Those elements should be used to render the article
// as a teaser e.g. on section pages.
//
// Different types of elements like images or videos share
// the same message structure distinguished by the `ElementType` field.
message Element {
  // Type of the element.
  ElementType type = 1;

  // The usages (relations) of an element.
  // Example:
  // One image element with the relations `teaser` and `opener` is used for
  // both places.
  repeated ElementRelation relations = 2;

  // Assets of the element like images, videos or metadata (required).
  repeated Asset assets = 3;

  // Children of the element.
  repeated Element children = 4;
  // Type of an element.
  enum ElementType {
    // Not specified, not supported or yet unknown.
    ELEMENT_TYPE_UNSPECIFIED = 0;

    // An article element.
    ARTICLE = 1;

    // An image element.
    IMAGE = 2;

    // A video element.
    VIDEO = 3;

    // A gallery element.
    GALLERY = 4;

    // An oembed element.
    OEMBED = 5;

    // An author element.
    AUTHOR = 6;

    // An agency (e.g. DPA) element.
    AGENCY = 7;

    // An element that represents a <esi:include>
    EDGE_SIDE_INCLUDE = 8;

    // A citation element.
    CITATION = 9;
  }

  // Relation or usage of an element
  enum ElementRelation {
    // Not specified.
    ELEMENT_RELATION_UNSPECIFIED = 0;

    // As an opener element
    OPENER = 1;

    // As an teaser element
    TEASER = 2;
  }
}

// Asset of an element.
message Asset {
  // Type of the asset.
  AssetType type = 1;

  // Generic map containing general content and configuration information of
  // the asset.
  //
  // Depending on the type of the asset, this map will contain different
  // entry sets, e.g. `source`, `width` and `height` for images.
  //
  // Clients must be resilient to unknown or missing entry sets.
  map<string, string> fields = 2;

  // Technical metadata of the asset.
  Metadata metadata = 3;


  // Type of an asset.
  enum AssetType {
    // Not specified.
    ASSET_TYPE_UNSPECIFIED = 0;

    // An image asset.
    IMAGE = 1;

    // A video asset.
    VIDEO = 2;

    // An URL asset.
    URL = 3;

    // A metadata asset.
    METADATA = 4;
  }
}

// Body of the article to render on detail pages.
message Body {
  // Recursive Body nodes.
  repeated BodyNode children = 1;
}

// Recursive body structure representing all types of possible
// body nodes inside an article.
//
// Clients must be resilient to unknown or missing nodes.
message BodyNode {
  // Type of the node (required):
  //
  // * `text`
  // * `p`
  // * `sub_headline`
  // * `a`
  // * `strong`
  // * `em`
  // * `br`
  // * `ul`
  // * `ol`
  // * `li`
  // * `img`: inline image element
  // * `oembed`: inline oEmbed element
  // * `article_sources`: "Quellenapparat"
  // * `article_source`: A single "Quellenapparat" item containing `text` or `a`
  // * `disclaimer`: formatted text that holds a (health) disclaimer, e.g. used in `/gesundheit/`
  string type = 1;

  // Text of the node, only set for text nodes (`type == 'text'`).
  string text = 2;

  // Additional information for the node depending on it's type,
  // e.g. `href` for `a` nodes.
  map<string, string> fields = 3;

  // Children of the node, e.g. the `text` of a `p`.
  repeated BodyNode children = 4;

  // Elements of the node, e.g. inline videos or galleries.
  repeated Element elements = 5;
}
