syntax = "proto3";

// Core package defining the central data structures for editorial content, first and foremost the `Article`
// and all it's related fields.
//
// This package also defines gRPC services to retrieve such articles.
// Test
package stroeer.core.v1;

import "google/protobuf/timestamp.proto";
import "stroeer/core/v1/shared.proto";

option go_package = "github.com/stroeer/go-tapir/core/v1;core";

// An article represents a piece of content created in the content management
// system. Different types of content like text or video articles share
// the same message structure and can be distinguished by the [Article.Type](#stroeer.core.v1.Article.Type) field.
//
// Text articles (`type = Article.Type.ARTICLE`) also have [`SubType`](#stroeer.core.v1.Article.SubType) to differentiate its purpose and form.
//
// ### Teaser
//
// To improve performance of database access and during network transmission tapir is using a lightweight representation of an `Article` in some places.
//
// Depending on the service used to retrieve an article, the `Article` message might only contain data required on section pages:
//
// * `Article.body` set to `null`
// * `Article.elements` filtered by `Element.relations` to only contain `TEASER`, but neither `OPENER` nor `SOCIAL`
//
// Thus, not containing any data that is only required on detail pages.
//
// This lightweight representation is sometimes referred to as `Teaser`.
//
// ### Fields
//
// The entry set of the fields map is defined by the content management system and will vary depending on the main type of the article.
//
//  ⚠ Clients must be resilient to unknown or missing entries. ⚠
//
// #### For [Article.Type.ARTICLE](#stroeer.core.v1.Article.Type)
// this map will contain the following data:
//
// | key                    | mandatory | description                                                                                          |
// |------------------------|-----------|------------------------------------------------------------------------------------------------------|
// | `headline`             | *         | the headline for this content                                                                        |
// | `top_line`             | *         | "dachzeile"                                                                                          |
// | `ref_path`             | *         | URL path for this article e.g. `/${section_tree}/id_${id}/${title}.html`                             |
// | `ref_canonical`        | *         | Canonical URL of this article, may differ if external, e.g. https://www.example.com/external.html    |
// | `summary`              |           | summary for this content                                                                             |
// | `teaser_text`          |           | used on teasers, overrides `summary`                                                                 |
// | `meta_robots`          |           |                                                                                                      |
// | `social_headline`      |           | used for social markup, overrides `headline`                                                         |
// | `headline_short`       |           | used for "Schlagzeilen", overrides `headline`                                                        |
// | `meta_title`           |           | HTML `<meta title>`                                                                                  |
// | `expert_line`          |           |                                                                                                      |
// | `social_description`   |           |                                                                                                      |
// | `meta_description`     |           | HTML `<meta description>`                                                                            |
// | `reading_time_minutes` |           | estimated reading time in minutes                                                                    |
// | `flag:hidden`          |           | this content must be excluded from automated curations (CMS: `no auto-content`/`manuell kuratieren`) |
//
// #### For [Article.Type.GALLERY](#stroeer.core.v1.Article.Type)
// this map will contain the following data:
//
// | key        | mandatory | description                   |
// |------------|-----------|-------------------------------|
// | `headline` | *         | the headline for this content |
//
message Article {
  // Unique ID of the article defined by the content management system (required).
  int64 id = 1;
  // Main content type of the article (required).
  Type type = 2;
  // Subtype of the article. For `ARTICLE` this field holds a `sub_type`, for others like `GALLERY` it may not.
  SubType sub_type = 3;
  // Hierarchical section tree information of the article (required).
  stroeer.core.v1.Reference section_tree = 4;
  // Generic map containing general content and configuration information of the article (required).
  map<string, string> fields = 5;
  // Recursive textual body of the article to be rendered on detail pages. May be `null` for Teasers.
  repeated Body bodies = 6;
  // Metadata information like state and various timestamps.
  Metadata metadata = 7;
  // Elements required to render the article as a teaser, such as `IMAGE`, `VIDEO` or `AUTHOR`                                                               |
  repeated Element elements = 8;
  // Extracted keywords from the article body like persons, locations, organizations etc.
  repeated Keyword keywords = 9;
  // IDs of articles related to this article. Related articles are defined manually in the content management system by the editorial department.  This field is deprecated, use `related_articles` instead.
  repeated int64 onwards = 10 [deprecated = true];
  // Variants of this article, e.g. for headline testing.
  map<string, Article> variants = 11;
  // Authors and/or agency information
  repeated Author authors = 12;
  // Editorial articles, which are related to the main article. May only be an empty unresolved article (not all services will resolve these).
  repeated Article related_articles = 13;
  // Extracted entities from the article body like persons, locations, organizations etc. This field is deprecated, use `keywords` instead.
  repeated string entities = 100 [deprecated = true];

  // Main type of the article
  //
  // Clients might render an article differently depending on it's type or use the type for filtering.
  enum Type {
    // unspecified
    TYPE_UNSPECIFIED = 0;
    //  A text article
    ARTICLE = 1;
    // An image article, this type is deprecated and must not be used for new articles
    IMAGE = 2 [deprecated = true];
    // A video article, contains HLS-videos, as well as external live streams
    VIDEO = 3;
    // A gallery article
    GALLERY = 4;
    // An embed article including an oembed or edge_side_include element
    EMBED = 5;
    // An author article, currently not implemented
    AUTHOR = 6;
    // An agency article, this type is deprecated and must not be used for new articles
    AGENCY = 7 [deprecated = true];
    // An external article (teaser-like external article)                                                               |
    EXTERNAL = 8;
    // A thematically grouped cluster for various amount of articles, resolved `Trails` embedded via `related_articles`
    CLUSTER = 9;
    // Used for internal purposes only.
    INTERNAL = 100;
  }

  // Subtype of the article.
  //
  // Articles of type [Article.Type.ARTICLE](#stroeer.core.v1.Article.Type)
  // are usually sub typed to alter its rendering and purpose or for filtering.
  enum SubType {
    // unspecified
    SUB_TYPE_UNSPECIFIED = 0;
    // Meldung/Nachricht, this is the default
    NEWS = 1;
    // Kolumne
    COLUMN = 2;
    // Kommentar
    COMMENTARY = 3;
    // Interview
    INTERVIEW = 4;
    // Pro und Kontra/Streitgespräch
    CONTROVERSY = 5;
    // Tagesanbruch
    TAGESANBRUCH = 6;
    // Evergreen
    EVERGREEN = 7;
    // Content originally imported from agency/tickers by the CMS
    AGENCY_IMPORT = 8;
    // Advertorial
    ADVERTORIAL = 9;
    // Quiz
    QUIZ = 10;
    // (Browser) Game
    GAME = 11;
    // Internal company articles like an imprint or contact forms
    COMPLIANCE = 12;
    // Cooking recipe                                             |
    RECIPE = 13;
  }

  // `Element`s are self-contained objects that represent structured data that
  // is usually too complex to fit into our usual workhorse which is the
  // [`Body`](#body).
  //
  // `Element`s can appear in multiple places within the `Article`:
  //
  // 1. `Article.elements`
  //
  // `Element`s of the article which are not part of the textual body, e.g. author,
  // opener and teaser. Those elements should be used to render the article
  // as a teaser e.g. on section pages.
  //
  // 2. `BodyNode.children`:
  //
  // Is the place where `Element` are quite commonly used. They come in various
  // and will be rendered inplace, thus breaking up the textual body.
  //
  // 3. `Elements.children`:
  //
  // Some more sophisticated `Element`s make use of nesting to make their API
  // representation more concise and help to structure things hierarchically:
  //
  // * `video` uses nesting to model its optional _poster image_ which itself is a
  // normal `image`.
  //
  // * `galleries` have their individual `image`s nested within.
  //
  // Different types of elements like images or videos share
  // the same message structure distinguished by the `type` field.
  message Element {
    // Type of the element.
    Type type = 1;
    // The usages (relations) of an element.
    repeated Relation relations = 2;
    // Assets describing this element.
    repeated Asset assets = 3;
    // Nested `Elements`, e.g. for `Element` of type `gallery` and `video`
    repeated Element children = 4;

    // Type of the element.
    enum Type {
      // unspecified
      TYPE_UNSPECIFIED = 0;
      // Article, this is currently unused
      ARTICLE = 1;
      // Image, containing further `Assets`
      IMAGE = 2;
      // Video, containing nested `Asset` and an optional nested image `Element`
      VIDEO = 3;
      // Gallery, consists of many nested image `Element`s
      GALLERY = 4;
      // oEmbed, contains one `metadata` `Asset`
      OEMBED = 5;
      // Author, contains one `metadata` `Asset` and an optional image `Element`
      AUTHOR = 6;
      // Agency, contains one `metadata` `Asset`
      AGENCY = 7;
      // `<esi:include>` that must be resolved server-side for SEO reasons, otherwise similar to `OEMBED`
      EDGE_SIDE_INCLUDE = 8;
      // Citation, contains one `metadata` `Asset`
      CITATION = 9;
      // Widget or embed that is handled directly by the front end rendering
      INTERNAL_WIDGET = 10;
    }

    // The usages (relations) of an element.
    enum Relation {
      // unspecified
      RELATION_UNSPECIFIED = 0;
      // As an opener element (within the content)
      OPENER = 1;
      // As a teaser element (when externally viewed)
      TEASER = 2;
      // Use as social element (mostly images), e.g. `<og:image>` or JSON-LD
      SOCIAL = 3;
    }

    // Assets of an ´Element´
    //
    // An asset configuration is dependant upon its use, it may alter depending on its ´type´ field.
    message Asset {
      // Type of the asset.
      Type type = 1;
      // Generic map containing general content and configuration information of the asset. Clients must be resilient to unknown or missing entry sets.
      map<string, string> fields = 2;
      // Only present for `assets` of `TYPE.METADATA`. Technical metadata for the parent `element` (state, validity, ...).
      Metadata metadata = 3;

      // Asset type
      enum Type {
        // unspecified
        TYPE_UNSPECIFIED = 0;
        // Image asset with an resizable template URL and some image stats (`width`, `height`, `cropping`)
        IMAGE = 1;
        // Internal video asset, expect (`m3u8`/`HLS`) URLS and some video stats (`width`, `height`, `druation`) within `fields`
        VIDEO = 2;
        // Holds (`m3u8`/`HLS`) URLS to external videos, such as _live streams_ and _glomex_
        EXTERNAL_VIDEO = 3;
        // Metadata  for the parent element and `fields` that also depend on the parent `Element.Type`
        METADATA = 4;
        // Additional link (href, reference) asset for parent `Element`, e.g. an `image` with an optional link target
        LINK = 5;
      }
    }
  }

  // The `Body` represents a basic block. Each `Body` is self-contained and holds all the
  // data required for rendering within its data structures.
  //
  // Common use cases for this are `Type.BODY` where the textual article body can be found
  // and the `TYPE.ARTICLE_SOURCE` where onward articles are referenced.
  //
  // Each `Body` has a `Body.Type` to help the consumer to correctly interpret the  `BodyNode's` content.
  message Body {
    // Recursive/nested structure that usually represents the textual body / Markup / HTML
    repeated BodyNode children = 1;
    Type type = 2;

    // Type of the body.
    enum Type {
      // unspecified
      TYPE_UNSPECIFIED = 0;
      // The textual article body including all inline elements such as `IMAGE`, `VIDEO` and `EMBED`
      BODY = 1;
      // A wrapper for all article sources ("Quellenaparat"). There can only be one of these per article.
      ARTICLE_SOURCES = 2;
      // A article disclaimer with important notes/legal stuff. E.g. "medizinischer Hinweis" on all medical articles
      DISCLAIMER = 3;
      // Includes information what the current article type is (e.g. opinion article). There can only be one of these per article.
      TRUST_BOX = 4;
      // Table of contents for this article, consists of anchors which refer to sub headlines within the `BODY`
      TABLE_OF_CONTENTS = 5;
    }

    // Recursive structure representing all types of possible nodes inside an article.
    //
    // One use-case is to represent HTML-like markup in tapir, but it is also used to map custom elements that require a strict positional placement within the textual body.
    // Things that are not part of the textual article body are represented as individual `Body` parts so they can be rendered independently if required.
    //
    // Clients must be resilient to unknown or missing nodes.
    //
    // ## fields
    //
    // Fields of a `BodyNode` can be HTML like or custom.
    //
    // ### HTML like fields
    //
    // | type           | description                                                                                                                                               |
    // |----------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------|
    // | `text`         | most basic `type`, its text value can be found in the `text` field. The `word_count` can be found in the `BodyNode.fields` for each `BodyNode[type=text]` |
    // | `p`            | `paragraph` / `<p>`                                                                                                                                       |
    // | `span`         | `<span>`                                                                                                                                                  |
    // | `sub_headline` | a sub headline, may be part of the _table of contents_                                                                                                    |
    // | `a`            | `anchor` / `<a>`                                                                                                                                          |
    // | `strong`       | `strong` / `<strong>`                                                                                                                                     |
    // | `em`           | `emphasis` / `<em>`                                                                                                                                       |
    // | `sub`          | `subscript` / `sub`                                                                                                                                       |
    // | `sup`          | `superscript` / `sup`                                                                                                                                     |
    // | `hr`           | `horizontal rule` / `<hr>`                                                                                                                                |
    // | `br`           | `line break` / `<br>`                                                                                                                                     |
    // | `ul`           | `unordered list` / `<ul>`                                                                                                                                 |
    // | `ol`           | `ordered list` / `<ol>`                                                                                                                                   |
    // | `li`           | `list` / `<li>`                                                                                                                                           |
    // | `table`        | `table` / `<table>`                                                                                                                                       |
    // | `thead`        | `table head` / `<thead>`                                                                                                                                  |
    // | `tbody`        | `table body` / `<tbody>`                                                                                                                                  |
    // | `tfoot`        | `table footer` / `<tfoot>`                                                                                                                                |
    // | `th`           | `table header` / `<th>`                                                                                                                                   |
    // | `tr`           | `table row` / `<tr>`                                                                                                                                      |
    // | `td`           | `table data cell` / `<td>`                                                                                                                                |
    //
    // ### Custom fields
    //
    // | type            | description                                                                   |
    // |-----------------|-------------------------------------------------------------------------------|
    // | `image`         | inline image element, check `elements`                                        |
    // | `video`         | inline video element, check `elements`                                        |
    // | `gallery`       | inline gallery element, check `elements`                                      |
    // | `oembed`        | inline oEmbed element, check `elements`                                       |
    // | `esi`           | inline edge side include element, check `elements`                            |
    // | `quote`         | inline quotation element, check `elements`                                    |
    // | `infobox`       | inline box, consists of textual content in `children` and optional `elements` |
    // | `pros_and_cons` | pros and cons box, consists of `elements` and structured text in `children`   |
    message BodyNode {
      // type of the node (required)
      string type = 1;
      // text of the node, only set for text nodes (`type == 'text'`)
      string text = 2;
      // additional information for the node depending on it's type, e.g. `href` for `a` nodes (see above)
      map<string, string> fields = 3;
      // nested Items, e.g. the `text` of a `<p>` or a `<a>`
      repeated BodyNode children = 4;
      // Elements of the node, e.g. video, image, gallery, embed et. al
      repeated Element elements = 5;
    }
  }

  // Article or Element metadata like publication state and technical timestamps.
  message Metadata {
    // State of the article in the content management system.
    State state = 1;
    // Manually set editorial timestamp ("Gültig von") at which the article is valid to deliver on digital platforms in seconds of UTC time since Unix epoch.
    google.protobuf.Timestamp start_time = 2;
    // Manually set editorial timestamp ("Gültig bis") till the article is valid to deliver on digital platforms in seconds of UTC time since Unix epoch.
    google.protobuf.Timestamp end_time = 3;
    // Editorial timestamp ("Publikationsdatum") of the first publication of the article in seconds of UTC time since Unix epoch. This date will be set automatically by the content management system.
    google.protobuf.Timestamp publish_time = 4;
    // Editorial timestamp ("Aktualisierungsdatum") at which the article was updated in seconds of UTC time since Unix epoch. On first publication this timestamp matches `publish_time`. Afterwards it's either updated manually in the content management system or automatically if the article content changed *significantly*.
    google.protobuf.Timestamp update_time = 5;
    // Technical timestamp at which the article was transformed in the API layer in seconds of UTC time since Unix epoch.
    google.protobuf.Timestamp transformation_time = 6;
    // Number of errors occurred while fetching and/or transforming optional article components (e.g. `embeds` or nested `documents`) to an `article` message.
    int64 transformation_errors = 7;
    // Technical timestamp at which the article was published regardless of the amount and significance of the change.
    google.protobuf.Timestamp last_modification_time = 8;
    // Source of the event that caused this item to be transformed and to be written into the DB.
    EventSource event_source = 9;
    // The `article score` (originates from internal content engine, higher scores are better)
    double seo_score = 10;
    // The unique `publication_id` provided by the CMS, can be used to correlate the state of documents in tapir with the corresponding CMS publication event.
    int64 publication_id = 11;
    // Source of this article, if embedded in another article as a related article.
    string related_article_source = 12;
    // The tenant this article belongs to. e.g. `www`, `berlin` or such
    string tenant = 13;

    // State of an article or element in the content management system.
    // The `state` in combination with `start_time` and `end_time` determines whether or not this item should be
    // rendered; this must be respected by all consumers especially when content is duplicated or cached.
    //
    // The terms `deleted` (articles) and `archived` (media lib) are interchangeable/synonyms.
    // This enum combines those two into `State.DELETED`. An Article is in `State.DELETED`
    // if it was deleted in the content management system, or if it's ´end_time´ has been reached.
    //
    // An Article is in `State.DRAFT` if it has never been published, or if the
    // `start_time` lies in the future.
    enum State {
      // unspecified
      STATE_UNSPECIFIED = 0;
      // published content which is currently within its validity dates
      PUBLISHED = 1;
      // this content is deleted or expired in the CMS
      DELETED = 2;
      // this content was never published in the CMS
      DRAFT = 3;
    }

    // Even more detail about the circumstances of transformation for this article.
    //
    // The `EventSource` will be of type:
    // * `PRIMARY` in case this article was directly _updated_ and _published_
    // * `SECONDARY` in case this article was indirectly updated.
    //
    // This can be caused by updates of _nested elements_ such as _Videos_ that may expire at some point.
    // Another source of change may be _Scheduled Events_ like this item becomes _valid_ or _invalid_ at some
    // point in time in the future after the item's original publication time.
    enum EventSource {
      // unspecified
      EVENT_SOURCE_UNSPECIFIED = 0;
      // this article's transformation was caused by a direct change in the CMS
      PRIMARY = 1;
      // this article's transformation was caused by a transitive update
      SECONDARY = 2;
      // this article's transformation was caused by an external system (Content Engine)
      CONTENT_ENGINE = 3;
    }
  }

  // Extracted keywords from the article body like persons, locations, organizations etc.
  message Keyword {
    // Unique value of this keyword.
    string value = 1;
    // Type/Category of this keyword like `location`, `organization`, `person`
    string type = 2;
    // Score for the relevance of this keyword set by the engine
    float score = 3;
  }
}

// Author or agency of an article.
//
// The entity may be the main content on author pages or simply indicate the author of an article.
message Author {
  // The unique identifier (cms id) of the author.
  int64 id = 1;
  // The type of the author entity.
  Type type = 2;
  // The fields of the author. This is a map of key-value pairs. The keys are the field names and the values are the field values.
  map<string, string> fields = 3;
  // The elements of the author, e.g. the author's profile picture.
  repeated Article.Element elements = 4;
  // The career entries of the author.
  repeated HistoryEntry work_history = 5;
  // The education entries of the author.
  repeated Reference education = 6;
  // The social profiles of the author.
  repeated Reference social_profiles = 7;
  // List of topics where the author possesses extraordinary knowledge
  repeated string areas_of_expertise = 8;

  // Author type
  enum Type {
    // unspecified
    TYPE_UNSPECIFIED = 0;
    // The author is a person.
    AUTHOR = 1;
    // The author is an agency or company.
    AGENCY = 2;
  }

  // Lists previous jobs and details about the author's career.
  message HistoryEntry {
    // The role of the author for this occupation.
    string role = 1;
    // A description of the author's role.
    string description = 2;
  }
}
