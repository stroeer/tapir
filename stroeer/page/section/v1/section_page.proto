syntax = "proto3";

package stroeer.page.section.v1;

import "stroeer/core/v1/shared.proto";
import "stroeer/core/v1/article.proto";

option go_package = "github.com/stroeer/tapir/go/stroeer/page/section/v1;section";
option java_multiple_files = true;
option java_package = "de.stroeer.page.section.v1";

// All data to render a section page like the homepage or "/politik/".
message SectionPage {
  repeated Section section = 1;
  repeated Stage stages = 2;
}

// All meta information to render a section page
message Section {
  // Generic map containing general content and configuration information of
  // the section (required).
  //
  // This map will always contain non empty values for the following keys:
  //
  // * `url_path`: URL path for this section e.g. /sport/fussball/bundesliga/
  // * `url_canonical`: Canonical URL of the section, may differ if external, e.g. https://www.giga.de/tech/
  // * `url_amp`: AMP URL of the section
  //
  // Clients must be resilient to unknown or missing entry sets.
  map<string, string> fields = 1;

  // Hierarchical section tree information of the section (required).
  stroeer.core.v1.Category section_tree = 2;
}

// A block of teasers - can consist of editorial articles, advertisement and/or stages.
message Stage {
  repeated StageItem stage_items = 1;
  StageConfiguration stage_configuration = 2;
}

// Rendering data for a stage, currently only a fields map.
// Coordinate stage layouts, especially the `default` layout with UI department.
message StageConfiguration {
  // * `stage_title`: represents an optional label to be rendered above a Stage, like "CORONAVIRUS".
  // * `stage_layout`: represents a visual layout, which may affect teasers, colors, and other styles.
  // If entry `stage_layout` is missing, use layout `default`.
  map<string, string> fields = 1;

  // All kind of references like:
  // * stage_title
  // * sub_navigation
  // Filter reference by type.
  repeated stroeer.core.v1.Reference references = 2;
}

// A single generic item of a stage.
message StageItem {
  // Width instructions for rendering the single item.
  StageItemWidth stage_item_width = 1;
  // At most one field will be set at the same time.
  // The delegate of the StageItem can be another Stage, an editorial article or a Commercial.
  oneof stage_item_type {
    Stage stage = 2;
    ArticleTeaser article_teaser = 3;
    Commercial commercial = 4;
  }
}

// Data to render a Commercial as part of a Stage.
// todo: requirements for this feature are currently missing.
message Commercial {
  map<string, string> fields = 1;
}

// Bundles the data needed to render a core article as a teaser.
// Coordinate teaser layouts, especially the `default` layout with UI department.
message ArticleTeaser {
  // `Article.body` is set to `null` to reduce overhead.
  stroeer.core.v1.Article article = 1;
  // `fields` may contain additional rendering information.
  // * `teaser_layout`: marker to use a particular layout in the rendering teaser template.
  // * `teaser_variant`: marker to use also a particular variant of the provided `teaser_layout`.
  // If `teaser_layout` entries is missing use layout `default`.
  map<string, string> fields = 2;
}

// Info to render the width of an item, relative to the page grid.
// These values represent "desktop-first" widths.
enum StageItemWidth {
  STAGE_ITEM_WIDTH_UNSPECIFIED = 0;
  // 100%
  STAGE_ITEM_WIDTH_FULL = 1;
  // 75%
  STAGE_ITEM_WIDTH_THREE_QUARTERS = 2;
  // 66%
  STAGE_ITEM_WIDTH_TWO_THIRDS = 3;
  // 50%
  STAGE_ITEM_WIDTH_ONE_HALF = 4;
  // 33%
  STAGE_ITEM_WIDTH_ONE_THIRD = 5;
  // 25%
  STAGE_ITEM_WIDTH_ONE_QUARTER = 6;
}
