syntax = "proto3";

package stroeer.page.section.v1;

import "stroeer/core/v1/shared.proto";
import "stroeer/core/v1/article.proto";

option go_package = "github.com/stroeer/tapir/go/stroeer/page/section/v1;section";
option java_multiple_files = true;
option java_package = "de.stroeer.page.section.v1";

// All data to render a section page like the homepage or "/politik/".
message SectionPage {
  Section section = 1;
  repeated Stage stages = 2;
}

// All meta information to render a section page.
message Section {
  // Generic map containing general content and configuration information of
  // the section (required).
  //
  // The entry set is defined by the content management system and
  // will vary depending on the main type of the article.
  //
  // This map will always contain non empty values for the following keys:
  //
  // * `ref_path`: URL path for this section e.g. /section/id_$ID/title.html
  // * `ref_canonical`: Canonical URL of this section, may differ if external, e.g. https://www.giga.de/tech/
  // * `ref_amp`: AMP URL of this section
  //
  // Clients must be resilient to unknown or missing entry sets.
  map<string, string> fields = 1;

  // Hierarchical section tree information of the section (required).
  // For example:
  // `/` -> `/sport/` -> `/sport/fussball/`
  stroeer.core.v1.Reference section_tree = 2;
}

// A "row" of teasers - can consist of editorial articles, advertisement and/or stages.
message Stage {
  StageConfiguration stage_configuration = 1;
  repeated StageItem stage_items = 2;
  // optional, always render the column with the Title and SubNav from the StageConfiguration
  repeated StageItem companions = 3;
}

// Rendering data for a stage, currently only a fields map.
// Coordinate stage layouts, especially the `stream` layout with UI department.
message StageConfiguration {
  // * `stage_layout`: represents a visual layout, which may affect teasers, colors, and other styles.
  // If entry `stage_layout` is missing, use layout `stream`.
  // the stage_layout field can be used to configure full page width commercials (e.g. nativendo, t-online empfiehlt)
  map<string, string> fields = 1;

  // All kind of references as part of the stage. Filter reference by
  // `Reference.type`:
  // * `ref_stage_title`
  // * `ref_sub_navigation`
  repeated stroeer.core.v1.Reference references = 2;
}

// A single generic item of a stage.
message StageItem {
  // Optional flags/hints for customization only for the stage item.
  map<string, string> fields = 1;
  // At most one field will be set at the same time.
  // The delegate of the StageItem can be another Stage, an editorial article or a Commercial.
  oneof stage_item_type {
    TeaserStage stage = 2;
    ArticleTeaser article_teaser = 3;
    Commercial commercial = 4;
  }
}

// A non-recursive collection of teaseable items.
message TeaserStage {
  // * `stage_layout`: represents a visual layout, which may affect teasers, colors, and other styles.
  // If entry `stage_layout` is missing, use layout `stream`.
  // the stage_layout field can be used to configure full page width commercials (e.g. nativendo, t-online empfiehlt)
  map<string, string> fields = 1;
  repeated TeaserStageItem teaser_stage_items = 2;
}

// A single teaseable item.
// alternatives: ClickableItem, LinkedItem, EverythingButAStage
message TeaserStageItem {
  // Optional flags/hints for customization only for the stage item.
  map<string, string> fields = 1;
  // At most one field will be set at the same time.
  // The delegate of the StageItem can be an editorial article or a Commercial.
  oneof teaser_stage_item_type {
    ArticleTeaser article_teaser = 2;
    Commercial commercial = 3;
  }
}

// Bundles the data needed to render a core article as a teaser as part of a stage.
// Coordinate teaser layouts, especially the `stream` layout with UI department.
message ArticleTeaser {
  // `fields` may contain additional rendering information.
  // * `teaser_layout`: marker to use a particular layout in the rendering teaser template.
  // * `teaser_variant`: marker to use also a particular variant of the provided `teaser_layout`.
  // If `teaser_layout` entries is missing use layout `stream`.
  map<string, string> fields = 2;
  // `Article.body` is set to `null` to reduce overhead.
  stroeer.core.v1.Article article = 1;
}

// Bundles the data to render a commercial as part of a stage.
message Commercial {
  // Addtional advertisement booking ids. This may individual for each commercial type.
  map<string, string> fields = 1;
}
