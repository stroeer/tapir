plugins {
  id 'idea'
  id 'java-library'
  id 'maven-publish'
  id 'com.github.ben-manes.versions' version '0.46.0'
}

ext {
  apiVersion = 'v1'
  gh_username = System.getenv("GITHUB_ACTOR") ?: (project.findProperty('github.actor') ?: "none")
  gh_token = System.getenv("GITHUB_TOKEN") ?: (project.findProperty('github.token') ?: "none")
}

group = 'de.stroeer.api.grpc'
archivesBaseName = "${project.name}-${apiVersion}"
sourceCompatibility = '17'
targetCompatibility = '17'

repositories {
  mavenCentral()
}

dependencies {
  def protoc = '3.24.3'

  implementation group: 'io.grpc', name: 'grpc-services', version: '1.58.0'
  implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'

  implementation group: 'com.google.protobuf', name: 'protobuf-java', version: protoc
  implementation group: 'com.google.protobuf', name: 'protobuf-java-util', version: protoc

  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.9.3'
}

task printVersion {
  doLast {
    println "publishing: ${project.group}:${archivesBaseName}:${version}"
  }
}
publishToMavenLocal.dependsOn printVersion

java {
  withSourcesJar()
}

tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
}

test {
  useJUnitPlatform()
}

publishing {
  repositories {
    maven {
      name = 'GitHubPackages'
      url = uri('https://maven.pkg.github.com/stroeer/tapir')
      credentials {
        username = gh_username
        password = gh_token
      }
    }
  }

  publications {
    gpr(MavenPublication) {
      from(components.java)

      artifactId "${archivesBaseName}"
      pom {
        name = artifactId
        description = "T-Online GRPC API for ${artifactId}"
        url = 'https://github.com/stroeer/tapir'

        organization {
          name = 'T-Online'
          url = 'https://www.t-online.de'
        }

        scm {
          url = 'https://github.com/stroeer/tapir'
        }
      }
    }
  }
}

def isNonStable = { String version ->
  def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
  def regex = /^[0-9,.v-]+(-r)?$/
  return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
  resolutionStrategy {
    componentSelection {
      all {
        if (isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)) {
          reject('Release candidate')
        }
      }
    }
  }
}

