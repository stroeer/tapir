// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fragment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StageServiceClient is the client API for StageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StageServiceClient interface {
	//*
	//############################################################################
	//# Description
	//############################################################################
	//Get single stages by requesting them via well-known ids, e.g. "schlagzeilen" or "meistgelesen".
	//
	//############################################################################
	//# Status/Error scenario's
	//############################################################################
	//
	//scenario: found
	//description: service responded without encountering exceptions
	//gRPC status: OK
	//gRPC error payload: none
	//HTTP status: OK
	//cacheable: yes
	//
	//scenario: internal
	//description: internal error while loading data
	//gRPC status: INTERNAL
	//gRPC error payload: none
	//HTTP status: 500
	//cacheable: no
	//
	//scenario: timeout
	//description: timeout while loading data
	//gRPC status: DEADLINE_EXCEEDED
	//gRPC error payload: none
	//HTTP status: 504
	//cacheable: no
	GetStages(ctx context.Context, in *GetStagesRequest, opts ...grpc.CallOption) (*GetStagesResponse, error)
}

type stageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStageServiceClient(cc grpc.ClientConnInterface) StageServiceClient {
	return &stageServiceClient{cc}
}

func (c *stageServiceClient) GetStages(ctx context.Context, in *GetStagesRequest, opts ...grpc.CallOption) (*GetStagesResponse, error) {
	out := new(GetStagesResponse)
	err := c.cc.Invoke(ctx, "/stroeer.fragment.v1.StageService/GetStages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StageServiceServer is the server API for StageService service.
// All implementations must embed UnimplementedStageServiceServer
// for forward compatibility
type StageServiceServer interface {
	//*
	//############################################################################
	//# Description
	//############################################################################
	//Get single stages by requesting them via well-known ids, e.g. "schlagzeilen" or "meistgelesen".
	//
	//############################################################################
	//# Status/Error scenario's
	//############################################################################
	//
	//scenario: found
	//description: service responded without encountering exceptions
	//gRPC status: OK
	//gRPC error payload: none
	//HTTP status: OK
	//cacheable: yes
	//
	//scenario: internal
	//description: internal error while loading data
	//gRPC status: INTERNAL
	//gRPC error payload: none
	//HTTP status: 500
	//cacheable: no
	//
	//scenario: timeout
	//description: timeout while loading data
	//gRPC status: DEADLINE_EXCEEDED
	//gRPC error payload: none
	//HTTP status: 504
	//cacheable: no
	GetStages(context.Context, *GetStagesRequest) (*GetStagesResponse, error)
	mustEmbedUnimplementedStageServiceServer()
}

// UnimplementedStageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStageServiceServer struct {
}

func (UnimplementedStageServiceServer) GetStages(context.Context, *GetStagesRequest) (*GetStagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStages not implemented")
}
func (UnimplementedStageServiceServer) mustEmbedUnimplementedStageServiceServer() {}

// UnsafeStageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StageServiceServer will
// result in compilation errors.
type UnsafeStageServiceServer interface {
	mustEmbedUnimplementedStageServiceServer()
}

func RegisterStageServiceServer(s grpc.ServiceRegistrar, srv StageServiceServer) {
	s.RegisterService(&StageService_ServiceDesc, srv)
}

func _StageService_GetStages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StageServiceServer).GetStages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stroeer.fragment.v1.StageService/GetStages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StageServiceServer).GetStages(ctx, req.(*GetStagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StageService_ServiceDesc is the grpc.ServiceDesc for StageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stroeer.fragment.v1.StageService",
	HandlerType: (*StageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStages",
			Handler:    _StageService_GetStages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stroeer/fragment/v1/stage_service.proto",
}
