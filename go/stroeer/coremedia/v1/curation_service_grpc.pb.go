// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package coremedia

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CurationServiceClient is the client API for CurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurationServiceClient interface {
	GetCuratedList(ctx context.Context, in *GetCuratedListRequest, opts ...grpc.CallOption) (*GetCuratedListResponse, error)
}

type curationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurationServiceClient(cc grpc.ClientConnInterface) CurationServiceClient {
	return &curationServiceClient{cc}
}

var curationServiceGetCuratedListStreamDesc = &grpc.StreamDesc{
	StreamName: "GetCuratedList",
}

func (c *curationServiceClient) GetCuratedList(ctx context.Context, in *GetCuratedListRequest, opts ...grpc.CallOption) (*GetCuratedListResponse, error) {
	out := new(GetCuratedListResponse)
	err := c.cc.Invoke(ctx, "/stroeer.coremedia.v1.CurationService/GetCuratedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurationServiceService is the service API for CurationService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterCurationServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type CurationServiceService struct {
	GetCuratedList func(context.Context, *GetCuratedListRequest) (*GetCuratedListResponse, error)
}

func (s *CurationServiceService) getCuratedList(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCuratedListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetCuratedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/stroeer.coremedia.v1.CurationService/GetCuratedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetCuratedList(ctx, req.(*GetCuratedListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterCurationServiceService registers a service implementation with a gRPC server.
func RegisterCurationServiceService(s grpc.ServiceRegistrar, srv *CurationServiceService) {
	srvCopy := *srv
	if srvCopy.GetCuratedList == nil {
		srvCopy.GetCuratedList = func(context.Context, *GetCuratedListRequest) (*GetCuratedListResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetCuratedList not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "stroeer.coremedia.v1.CurationService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "GetCuratedList",
				Handler:    srvCopy.getCuratedList,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "stroeer/coremedia/v1/curation_service.proto",
	}

	s.RegisterService(&sd, nil)
}
