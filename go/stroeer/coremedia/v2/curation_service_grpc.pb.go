// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package coremedia

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CurationServiceClient is the client API for CurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurationServiceClient interface {
	GetCuratedStage(ctx context.Context, in *GetCuratedStageRequest, opts ...grpc.CallOption) (*GetCuratedStageResponse, error)
	GetCuratedStages(ctx context.Context, in *GetCuratedStagesRequest, opts ...grpc.CallOption) (*GetCuratedStagesResponse, error)
}

type curationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurationServiceClient(cc grpc.ClientConnInterface) CurationServiceClient {
	return &curationServiceClient{cc}
}

var curationServiceGetCuratedStageStreamDesc = &grpc.StreamDesc{
	StreamName: "GetCuratedStage",
}

func (c *curationServiceClient) GetCuratedStage(ctx context.Context, in *GetCuratedStageRequest, opts ...grpc.CallOption) (*GetCuratedStageResponse, error) {
	out := new(GetCuratedStageResponse)
	err := c.cc.Invoke(ctx, "/stroeer.coremedia.v2.CurationService/GetCuratedStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var curationServiceGetCuratedStagesStreamDesc = &grpc.StreamDesc{
	StreamName: "GetCuratedStages",
}

func (c *curationServiceClient) GetCuratedStages(ctx context.Context, in *GetCuratedStagesRequest, opts ...grpc.CallOption) (*GetCuratedStagesResponse, error) {
	out := new(GetCuratedStagesResponse)
	err := c.cc.Invoke(ctx, "/stroeer.coremedia.v2.CurationService/GetCuratedStages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurationServiceService is the service API for CurationService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterCurationServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type CurationServiceService struct {
	GetCuratedStage  func(context.Context, *GetCuratedStageRequest) (*GetCuratedStageResponse, error)
	GetCuratedStages func(context.Context, *GetCuratedStagesRequest) (*GetCuratedStagesResponse, error)
}

func (s *CurationServiceService) getCuratedStage(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.GetCuratedStage == nil {
		return nil, status.Errorf(codes.Unimplemented, "method GetCuratedStage not implemented")
	}
	in := new(GetCuratedStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetCuratedStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/stroeer.coremedia.v2.CurationService/GetCuratedStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetCuratedStage(ctx, req.(*GetCuratedStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *CurationServiceService) getCuratedStages(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.GetCuratedStages == nil {
		return nil, status.Errorf(codes.Unimplemented, "method GetCuratedStages not implemented")
	}
	in := new(GetCuratedStagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetCuratedStages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/stroeer.coremedia.v2.CurationService/GetCuratedStages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetCuratedStages(ctx, req.(*GetCuratedStagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterCurationServiceService registers a service implementation with a gRPC server.
func RegisterCurationServiceService(s grpc.ServiceRegistrar, srv *CurationServiceService) {
	sd := grpc.ServiceDesc{
		ServiceName: "stroeer.coremedia.v2.CurationService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "GetCuratedStage",
				Handler:    srv.getCuratedStage,
			},
			{
				MethodName: "GetCuratedStages",
				Handler:    srv.getCuratedStages,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "stroeer/coremedia/v2/curation_service.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewCurationServiceService creates a new CurationServiceService containing the
// implemented methods of the CurationService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewCurationServiceService(s interface{}) *CurationServiceService {
	ns := &CurationServiceService{}
	if h, ok := s.(interface {
		GetCuratedStage(context.Context, *GetCuratedStageRequest) (*GetCuratedStageResponse, error)
	}); ok {
		ns.GetCuratedStage = h.GetCuratedStage
	}
	if h, ok := s.(interface {
		GetCuratedStages(context.Context, *GetCuratedStagesRequest) (*GetCuratedStagesResponse, error)
	}); ok {
		ns.GetCuratedStages = h.GetCuratedStages
	}
	return ns
}

// UnstableCurationServiceService is the service API for CurationService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableCurationServiceService interface {
	GetCuratedStage(context.Context, *GetCuratedStageRequest) (*GetCuratedStageResponse, error)
	GetCuratedStages(context.Context, *GetCuratedStagesRequest) (*GetCuratedStagesResponse, error)
}
