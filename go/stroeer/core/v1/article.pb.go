// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.13.0
// source: stroeer/core/v1/article.proto

package core

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ContentType int32

const (
	ContentType_CONTENT_TYPE_UNSPECIFIED ContentType = 0
	ContentType_CONTENT_TYPE_ARTICLE     ContentType = 1
	ContentType_CONTENT_TYPE_IMAGE       ContentType = 2
	ContentType_CONTENT_TYPE_VIDEO       ContentType = 3
	ContentType_CONTENT_TYPE_GALLERY     ContentType = 4
	ContentType_CONTENT_TYPE_OEMBED      ContentType = 5
	ContentType_CONTENT_TYPE_AUTHOR      ContentType = 6
	ContentType_CONTENT_TYPE_AGENCY      ContentType = 7
)

// Enum value maps for ContentType.
var (
	ContentType_name = map[int32]string{
		0: "CONTENT_TYPE_UNSPECIFIED",
		1: "CONTENT_TYPE_ARTICLE",
		2: "CONTENT_TYPE_IMAGE",
		3: "CONTENT_TYPE_VIDEO",
		4: "CONTENT_TYPE_GALLERY",
		5: "CONTENT_TYPE_OEMBED",
		6: "CONTENT_TYPE_AUTHOR",
		7: "CONTENT_TYPE_AGENCY",
	}
	ContentType_value = map[string]int32{
		"CONTENT_TYPE_UNSPECIFIED": 0,
		"CONTENT_TYPE_ARTICLE":     1,
		"CONTENT_TYPE_IMAGE":       2,
		"CONTENT_TYPE_VIDEO":       3,
		"CONTENT_TYPE_GALLERY":     4,
		"CONTENT_TYPE_OEMBED":      5,
		"CONTENT_TYPE_AUTHOR":      6,
		"CONTENT_TYPE_AGENCY":      7,
	}
)

func (x ContentType) Enum() *ContentType {
	p := new(ContentType)
	*p = x
	return p
}

func (x ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[0].Descriptor()
}

func (ContentType) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[0]
}

func (x ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentType.Descriptor instead.
func (ContentType) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0}
}

type ContentSubType int32

const (
	ContentSubType_CONTENT_SUB_TYPE_UNSPECIFIED ContentSubType = 0
	// Meldung/Nachricht — this is the default
	ContentSubType_CONTENT_SUB_TYPE_NEWS ContentSubType = 1
	// Kolumne
	ContentSubType_CONTENT_SUB_TYPE_COLUMN ContentSubType = 2
	// Bericht
	ContentSubType_CONTENT_SUB_TYPE_REPORT ContentSubType = 3
	// Kommentar
	ContentSubType_CONTENT_SUB_TYPE_COMMENTARY ContentSubType = 4
	// Interview
	ContentSubType_CONTENT_SUB_TYPE_INTERVIEW ContentSubType = 5
	// Pro und Kontra/Streitgespräch
	ContentSubType_CONTENT_SUB_TYPE_CONTROVERSY ContentSubType = 6
	// Reportage
	ContentSubType_CONTENT_SUB_TYPE_STORY ContentSubType = 7
	// Rezension/Kritik
	ContentSubType_CONTENT_SUB_TYPE_RECENSION ContentSubType = 8
	// Tagesanbruch
	ContentSubType_CONTENT_SUB_TYPE_TAGESANBRUCH ContentSubType = 9
	// Analyse
	ContentSubType_CONTENT_SUB_TYPE_ANALYSIS ContentSubType = 10
	// Satire/Glosse
	ContentSubType_CONTENT_SUB_TYPE_SATIRE ContentSubType = 11
)

// Enum value maps for ContentSubType.
var (
	ContentSubType_name = map[int32]string{
		0:  "CONTENT_SUB_TYPE_UNSPECIFIED",
		1:  "CONTENT_SUB_TYPE_NEWS",
		2:  "CONTENT_SUB_TYPE_COLUMN",
		3:  "CONTENT_SUB_TYPE_REPORT",
		4:  "CONTENT_SUB_TYPE_COMMENTARY",
		5:  "CONTENT_SUB_TYPE_INTERVIEW",
		6:  "CONTENT_SUB_TYPE_CONTROVERSY",
		7:  "CONTENT_SUB_TYPE_STORY",
		8:  "CONTENT_SUB_TYPE_RECENSION",
		9:  "CONTENT_SUB_TYPE_TAGESANBRUCH",
		10: "CONTENT_SUB_TYPE_ANALYSIS",
		11: "CONTENT_SUB_TYPE_SATIRE",
	}
	ContentSubType_value = map[string]int32{
		"CONTENT_SUB_TYPE_UNSPECIFIED":  0,
		"CONTENT_SUB_TYPE_NEWS":         1,
		"CONTENT_SUB_TYPE_COLUMN":       2,
		"CONTENT_SUB_TYPE_REPORT":       3,
		"CONTENT_SUB_TYPE_COMMENTARY":   4,
		"CONTENT_SUB_TYPE_INTERVIEW":    5,
		"CONTENT_SUB_TYPE_CONTROVERSY":  6,
		"CONTENT_SUB_TYPE_STORY":        7,
		"CONTENT_SUB_TYPE_RECENSION":    8,
		"CONTENT_SUB_TYPE_TAGESANBRUCH": 9,
		"CONTENT_SUB_TYPE_ANALYSIS":     10,
		"CONTENT_SUB_TYPE_SATIRE":       11,
	}
)

func (x ContentSubType) Enum() *ContentSubType {
	p := new(ContentSubType)
	*p = x
	return p
}

func (x ContentSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[1].Descriptor()
}

func (ContentSubType) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[1]
}

func (x ContentSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentSubType.Descriptor instead.
func (ContentSubType) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{1}
}

type ElementType int32

const (
	ElementType_ELEMENT_TYPE_UNSPECIFIED ElementType = 0
	ElementType_ELEMENT_TYPE_ARTICLE     ElementType = 1
	ElementType_ELEMENT_TYPE_IMAGE       ElementType = 2
	ElementType_ELEMENT_TYPE_VIDEO       ElementType = 3
	ElementType_ELEMENT_TYPE_GALLERY     ElementType = 4
	ElementType_ELEMENT_TYPE_OEMBED      ElementType = 5
	ElementType_ELEMENT_TYPE_AUTHOR      ElementType = 6
	ElementType_ELEMENT_TYPE_AGENCY      ElementType = 7
)

// Enum value maps for ElementType.
var (
	ElementType_name = map[int32]string{
		0: "ELEMENT_TYPE_UNSPECIFIED",
		1: "ELEMENT_TYPE_ARTICLE",
		2: "ELEMENT_TYPE_IMAGE",
		3: "ELEMENT_TYPE_VIDEO",
		4: "ELEMENT_TYPE_GALLERY",
		5: "ELEMENT_TYPE_OEMBED",
		6: "ELEMENT_TYPE_AUTHOR",
		7: "ELEMENT_TYPE_AGENCY",
	}
	ElementType_value = map[string]int32{
		"ELEMENT_TYPE_UNSPECIFIED": 0,
		"ELEMENT_TYPE_ARTICLE":     1,
		"ELEMENT_TYPE_IMAGE":       2,
		"ELEMENT_TYPE_VIDEO":       3,
		"ELEMENT_TYPE_GALLERY":     4,
		"ELEMENT_TYPE_OEMBED":      5,
		"ELEMENT_TYPE_AUTHOR":      6,
		"ELEMENT_TYPE_AGENCY":      7,
	}
)

func (x ElementType) Enum() *ElementType {
	p := new(ElementType)
	*p = x
	return p
}

func (x ElementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ElementType) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[2].Descriptor()
}

func (ElementType) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[2]
}

func (x ElementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ElementType.Descriptor instead.
func (ElementType) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{2}
}

type AssetType int32

const (
	AssetType_ASSET_TYPE_UNSPECIFIED AssetType = 0
	AssetType_ASSET_TYPE_IMAGE       AssetType = 1
	AssetType_ASSET_TYPE_VIDEO       AssetType = 2
	AssetType_ASSET_TYPE_URL         AssetType = 3
	AssetType_ASSET_TYPE_METADATA    AssetType = 4
)

// Enum value maps for AssetType.
var (
	AssetType_name = map[int32]string{
		0: "ASSET_TYPE_UNSPECIFIED",
		1: "ASSET_TYPE_IMAGE",
		2: "ASSET_TYPE_VIDEO",
		3: "ASSET_TYPE_URL",
		4: "ASSET_TYPE_METADATA",
	}
	AssetType_value = map[string]int32{
		"ASSET_TYPE_UNSPECIFIED": 0,
		"ASSET_TYPE_IMAGE":       1,
		"ASSET_TYPE_VIDEO":       2,
		"ASSET_TYPE_URL":         3,
		"ASSET_TYPE_METADATA":    4,
	}
)

func (x AssetType) Enum() *AssetType {
	p := new(AssetType)
	*p = x
	return p
}

func (x AssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[3].Descriptor()
}

func (AssetType) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[3]
}

func (x AssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetType.Descriptor instead.
func (AssetType) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{3}
}

type ElementRelation int32

const (
	ElementRelation_ELEMENT_RELATION_UNSPECIFIED ElementRelation = 0
	ElementRelation_ELEMENT_RELATION_OPENER      ElementRelation = 1
	ElementRelation_ELEMENT_RELATION_TEASER      ElementRelation = 2
	ElementRelation_ELEMENT_RELATION_INLINE      ElementRelation = 3
)

// Enum value maps for ElementRelation.
var (
	ElementRelation_name = map[int32]string{
		0: "ELEMENT_RELATION_UNSPECIFIED",
		1: "ELEMENT_RELATION_OPENER",
		2: "ELEMENT_RELATION_TEASER",
		3: "ELEMENT_RELATION_INLINE",
	}
	ElementRelation_value = map[string]int32{
		"ELEMENT_RELATION_UNSPECIFIED": 0,
		"ELEMENT_RELATION_OPENER":      1,
		"ELEMENT_RELATION_TEASER":      2,
		"ELEMENT_RELATION_INLINE":      3,
	}
)

func (x ElementRelation) Enum() *ElementRelation {
	p := new(ElementRelation)
	*p = x
	return p
}

func (x ElementRelation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ElementRelation) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[4].Descriptor()
}

func (ElementRelation) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[4]
}

func (x ElementRelation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ElementRelation.Descriptor instead.
func (ElementRelation) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{4}
}

type Article struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type       ContentType       `protobuf:"varint,2,opt,name=type,proto3,enum=stroeer.core.v1.ContentType" json:"type,omitempty"`
	SubType    ContentSubType    `protobuf:"varint,3,opt,name=sub_type,json=subType,proto3,enum=stroeer.core.v1.ContentSubType" json:"sub_type,omitempty"`
	References *References       `protobuf:"bytes,4,opt,name=references,proto3" json:"references,omitempty"`
	Section    *Section          `protobuf:"bytes,5,opt,name=section,proto3" json:"section,omitempty"`
	Fields     map[string]string `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body       *Body             `protobuf:"bytes,7,opt,name=body,proto3" json:"body,omitempty"`
	Metadata   *Metadata         `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Elements   []*Element        `protobuf:"bytes,9,rep,name=elements,proto3" json:"elements,omitempty"`
	Keywords   []string          `protobuf:"bytes,10,rep,name=keywords,proto3" json:"keywords,omitempty"`
	Onwards    []int64           `protobuf:"varint,12,rep,packed,name=onwards,proto3" json:"onwards,omitempty"`
}

func (x *Article) Reset() {
	*x = Article{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article) ProtoMessage() {}

func (x *Article) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article.ProtoReflect.Descriptor instead.
func (*Article) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0}
}

func (x *Article) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Article) GetType() ContentType {
	if x != nil {
		return x.Type
	}
	return ContentType_CONTENT_TYPE_UNSPECIFIED
}

func (x *Article) GetSubType() ContentSubType {
	if x != nil {
		return x.SubType
	}
	return ContentSubType_CONTENT_SUB_TYPE_UNSPECIFIED
}

func (x *Article) GetReferences() *References {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *Article) GetSection() *Section {
	if x != nil {
		return x.Section
	}
	return nil
}

func (x *Article) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Article) GetBody() *Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Article) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Article) GetElements() []*Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *Article) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *Article) GetOnwards() []int64 {
	if x != nil {
		return x.Onwards
	}
	return nil
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	//  editorial date: Gültig von
	ValidFrom *timestamp.Timestamp `protobuf:"bytes,2,opt,name=valid_from,json=validFrom,proto3" json:"valid_from,omitempty"`
	//  editorial date: Gültig bis
	ValidTo *timestamp.Timestamp `protobuf:"bytes,3,opt,name=valid_to,json=validTo,proto3" json:"valid_to,omitempty"`
	//  editorial date: Zuletzt bearbeitet
	LastEdited *timestamp.Timestamp `protobuf:"bytes,4,opt,name=last_edited,json=lastEdited,proto3" json:"last_edited,omitempty"`
	//  editorial date: Zuletzt publiziert
	LastPublished *timestamp.Timestamp `protobuf:"bytes,5,opt,name=last_published,json=lastPublished,proto3" json:"last_published,omitempty"`
	// editorial date: Erstellungsdatum
	Created *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
	// editorial date: Aktualisierungsdatum
	Updated *timestamp.Timestamp `protobuf:"bytes,7,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{1}
}

func (x *Metadata) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Metadata) GetValidFrom() *timestamp.Timestamp {
	if x != nil {
		return x.ValidFrom
	}
	return nil
}

func (x *Metadata) GetValidTo() *timestamp.Timestamp {
	if x != nil {
		return x.ValidTo
	}
	return nil
}

func (x *Metadata) GetLastEdited() *timestamp.Timestamp {
	if x != nil {
		return x.LastEdited
	}
	return nil
}

func (x *Metadata) GetLastPublished() *timestamp.Timestamp {
	if x != nil {
		return x.LastPublished
	}
	return nil
}

func (x *Metadata) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Metadata) GetUpdated() *timestamp.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      ElementType       `protobuf:"varint,1,opt,name=type,proto3,enum=stroeer.core.v1.ElementType" json:"type,omitempty"`
	Relations []ElementRelation `protobuf:"varint,2,rep,packed,name=relations,proto3,enum=stroeer.core.v1.ElementRelation" json:"relations,omitempty"`
	Assets    []*Asset          `protobuf:"bytes,3,rep,name=assets,proto3" json:"assets,omitempty"`
	Children  []*Element        `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *Element) Reset() {
	*x = Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Element) ProtoMessage() {}

func (x *Element) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Element.ProtoReflect.Descriptor instead.
func (*Element) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{2}
}

func (x *Element) GetType() ElementType {
	if x != nil {
		return x.Type
	}
	return ElementType_ELEMENT_TYPE_UNSPECIFIED
}

func (x *Element) GetRelations() []ElementRelation {
	if x != nil {
		return x.Relations
	}
	return nil
}

func (x *Element) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *Element) GetChildren() []*Element {
	if x != nil {
		return x.Children
	}
	return nil
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     AssetType         `protobuf:"varint,1,opt,name=type,proto3,enum=stroeer.core.v1.AssetType" json:"type,omitempty"`
	Index    int32             `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Fields   map[string]string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Metadata *Metadata         `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{3}
}

func (x *Asset) GetType() AssetType {
	if x != nil {
		return x.Type
	}
	return AssetType_ASSET_TYPE_UNSPECIFIED
}

func (x *Asset) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Asset) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Asset) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Section struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path   string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Label  string   `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Parent *Section `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *Section) Reset() {
	*x = Section{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Section) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Section) ProtoMessage() {}

func (x *Section) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Section.ProtoReflect.Descriptor instead.
func (*Section) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{4}
}

func (x *Section) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Section) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Section) GetParent() *Section {
	if x != nil {
		return x.Parent
	}
	return nil
}

type References struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// article's path, e.g. /section/id_$ID/title.html
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// article's canonical URL, may differ if external, e.g. https://www.giga.de/external.html
	Canonical string `protobuf:"bytes,2,opt,name=canonical,proto3" json:"canonical,omitempty"`
	// article's AMP URL, no pattern specified yet.
	Amp string `protobuf:"bytes,3,opt,name=amp,proto3" json:"amp,omitempty"`
}

func (x *References) Reset() {
	*x = References{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *References) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*References) ProtoMessage() {}

func (x *References) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use References.ProtoReflect.Descriptor instead.
func (*References) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{5}
}

func (x *References) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *References) GetCanonical() string {
	if x != nil {
		return x.Canonical
	}
	return ""
}

func (x *References) GetAmp() string {
	if x != nil {
		return x.Amp
	}
	return ""
}

type Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children []*BodyNode `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *Body) Reset() {
	*x = Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body) ProtoMessage() {}

func (x *Body) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body.ProtoReflect.Descriptor instead.
func (*Body) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{6}
}

func (x *Body) GetChildren() []*BodyNode {
	if x != nil {
		return x.Children
	}
	return nil
}

type BodyNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Text     string            `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Fields   map[string]string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Children []*BodyNode       `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
	Elements []*Element        `protobuf:"bytes,5,rep,name=elements,proto3" json:"elements,omitempty"` // inline-video, content|rich-links, gallery
}

func (x *BodyNode) Reset() {
	*x = BodyNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyNode) ProtoMessage() {}

func (x *BodyNode) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyNode.ProtoReflect.Descriptor instead.
func (*BodyNode) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{7}
}

func (x *BodyNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BodyNode) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *BodyNode) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *BodyNode) GetChildren() []*BodyNode {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *BodyNode) GetElements() []*Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

var File_stroeer_core_v1_article_proto protoreflect.FileDescriptor

var file_stroeer_core_v1_article_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xbf, 0x04, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x74,
	0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0a, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x72, 0x6f,
	0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x08,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x6e, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x07, 0x6f, 0x6e, 0x77, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xfe, 0x02, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x35, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x45,
	0x64, 0x69, 0x74, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0xfb, 0x01, 0x0a, 0x05, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x39, 0x0a, 0x0b, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74,
	0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x50, 0x0a,
	0x0a, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x6d, 0x70, 0x22,
	0x3d, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x6f,
	0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x99,
	0x02, 0x0a, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74,
	0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a,
	0x39, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xda, 0x01, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x54,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x47, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x45, 0x4d,
	0x42, 0x45, 0x44, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x17,
	0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x07, 0x2a, 0x85, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x45, 0x57, 0x53, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55,
	0x4d, 0x4e, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x52, 0x59,
	0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55,
	0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x49, 0x45, 0x57,
	0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55,
	0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x56, 0x45, 0x52,
	0x53, 0x59, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x07,
	0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x08,
	0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x45, 0x53, 0x41, 0x4e, 0x42, 0x52, 0x55, 0x43,
	0x48, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53,
	0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55,
	0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x54, 0x49, 0x52, 0x45, 0x10, 0x0b, 0x2a,
	0xda, 0x01, 0x0a, 0x0b, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52,
	0x54, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x10,
	0x04, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x45, 0x4d, 0x42, 0x45, 0x44, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4c,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f,
	0x52, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x07, 0x2a, 0x80, 0x01, 0x0a,
	0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x53,
	0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x52, 0x4c, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x04, 0x2a,
	0x8a, 0x01, 0x0a, 0x0f, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52,
	0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x41, 0x53, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x42, 0x48, 0x0a, 0x12,
	0x64, 0x65, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x70, 0x69, 0x72, 0x2f, 0x67,
	0x6f, 0x2f, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x3b, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stroeer_core_v1_article_proto_rawDescOnce sync.Once
	file_stroeer_core_v1_article_proto_rawDescData = file_stroeer_core_v1_article_proto_rawDesc
)

func file_stroeer_core_v1_article_proto_rawDescGZIP() []byte {
	file_stroeer_core_v1_article_proto_rawDescOnce.Do(func() {
		file_stroeer_core_v1_article_proto_rawDescData = protoimpl.X.CompressGZIP(file_stroeer_core_v1_article_proto_rawDescData)
	})
	return file_stroeer_core_v1_article_proto_rawDescData
}

var file_stroeer_core_v1_article_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_stroeer_core_v1_article_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_stroeer_core_v1_article_proto_goTypes = []interface{}{
	(ContentType)(0),            // 0: stroeer.core.v1.ContentType
	(ContentSubType)(0),         // 1: stroeer.core.v1.ContentSubType
	(ElementType)(0),            // 2: stroeer.core.v1.ElementType
	(AssetType)(0),              // 3: stroeer.core.v1.AssetType
	(ElementRelation)(0),        // 4: stroeer.core.v1.ElementRelation
	(*Article)(nil),             // 5: stroeer.core.v1.Article
	(*Metadata)(nil),            // 6: stroeer.core.v1.Metadata
	(*Element)(nil),             // 7: stroeer.core.v1.Element
	(*Asset)(nil),               // 8: stroeer.core.v1.Asset
	(*Section)(nil),             // 9: stroeer.core.v1.Section
	(*References)(nil),          // 10: stroeer.core.v1.References
	(*Body)(nil),                // 11: stroeer.core.v1.Body
	(*BodyNode)(nil),            // 12: stroeer.core.v1.BodyNode
	nil,                         // 13: stroeer.core.v1.Article.FieldsEntry
	nil,                         // 14: stroeer.core.v1.Asset.FieldsEntry
	nil,                         // 15: stroeer.core.v1.BodyNode.FieldsEntry
	(*timestamp.Timestamp)(nil), // 16: google.protobuf.Timestamp
}
var file_stroeer_core_v1_article_proto_depIdxs = []int32{
	0,  // 0: stroeer.core.v1.Article.type:type_name -> stroeer.core.v1.ContentType
	1,  // 1: stroeer.core.v1.Article.sub_type:type_name -> stroeer.core.v1.ContentSubType
	10, // 2: stroeer.core.v1.Article.references:type_name -> stroeer.core.v1.References
	9,  // 3: stroeer.core.v1.Article.section:type_name -> stroeer.core.v1.Section
	13, // 4: stroeer.core.v1.Article.fields:type_name -> stroeer.core.v1.Article.FieldsEntry
	11, // 5: stroeer.core.v1.Article.body:type_name -> stroeer.core.v1.Body
	6,  // 6: stroeer.core.v1.Article.metadata:type_name -> stroeer.core.v1.Metadata
	7,  // 7: stroeer.core.v1.Article.elements:type_name -> stroeer.core.v1.Element
	16, // 8: stroeer.core.v1.Metadata.valid_from:type_name -> google.protobuf.Timestamp
	16, // 9: stroeer.core.v1.Metadata.valid_to:type_name -> google.protobuf.Timestamp
	16, // 10: stroeer.core.v1.Metadata.last_edited:type_name -> google.protobuf.Timestamp
	16, // 11: stroeer.core.v1.Metadata.last_published:type_name -> google.protobuf.Timestamp
	16, // 12: stroeer.core.v1.Metadata.created:type_name -> google.protobuf.Timestamp
	16, // 13: stroeer.core.v1.Metadata.updated:type_name -> google.protobuf.Timestamp
	2,  // 14: stroeer.core.v1.Element.type:type_name -> stroeer.core.v1.ElementType
	4,  // 15: stroeer.core.v1.Element.relations:type_name -> stroeer.core.v1.ElementRelation
	8,  // 16: stroeer.core.v1.Element.assets:type_name -> stroeer.core.v1.Asset
	7,  // 17: stroeer.core.v1.Element.children:type_name -> stroeer.core.v1.Element
	3,  // 18: stroeer.core.v1.Asset.type:type_name -> stroeer.core.v1.AssetType
	14, // 19: stroeer.core.v1.Asset.fields:type_name -> stroeer.core.v1.Asset.FieldsEntry
	6,  // 20: stroeer.core.v1.Asset.metadata:type_name -> stroeer.core.v1.Metadata
	9,  // 21: stroeer.core.v1.Section.parent:type_name -> stroeer.core.v1.Section
	12, // 22: stroeer.core.v1.Body.children:type_name -> stroeer.core.v1.BodyNode
	15, // 23: stroeer.core.v1.BodyNode.fields:type_name -> stroeer.core.v1.BodyNode.FieldsEntry
	12, // 24: stroeer.core.v1.BodyNode.children:type_name -> stroeer.core.v1.BodyNode
	7,  // 25: stroeer.core.v1.BodyNode.elements:type_name -> stroeer.core.v1.Element
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_stroeer_core_v1_article_proto_init() }
func file_stroeer_core_v1_article_proto_init() {
	if File_stroeer_core_v1_article_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stroeer_core_v1_article_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Section); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*References); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stroeer_core_v1_article_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stroeer_core_v1_article_proto_goTypes,
		DependencyIndexes: file_stroeer_core_v1_article_proto_depIdxs,
		EnumInfos:         file_stroeer_core_v1_article_proto_enumTypes,
		MessageInfos:      file_stroeer_core_v1_article_proto_msgTypes,
	}.Build()
	File_stroeer_core_v1_article_proto = out.File
	file_stroeer_core_v1_article_proto_rawDesc = nil
	file_stroeer_core_v1_article_proto_goTypes = nil
	file_stroeer_core_v1_article_proto_depIdxs = nil
}
