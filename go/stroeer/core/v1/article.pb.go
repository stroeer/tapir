// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.17.3
// source: stroeer/core/v1/article.proto

package core

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Main content type of the article.
type Article_ContentType int32

const (
	// Not specified.
	Article_CONTENT_TYPE_UNSPECIFIED Article_ContentType = 0
	// A text article.
	Article_ARTICLE Article_ContentType = 1
	// An image article (not available as standalone article).
	Article_IMAGE Article_ContentType = 2
	// A video article.
	Article_VIDEO Article_ContentType = 3
	// A gallery article.
	Article_GALLERY Article_ContentType = 4
	// An oembed article.
	Article_OEMBED Article_ContentType = 5
	// An author article (not available as standalone article).
	Article_AUTHOR Article_ContentType = 6
	// An agency article (not available as standalone article).
	Article_AGENCY Article_ContentType = 7
)

// Enum value maps for Article_ContentType.
var (
	Article_ContentType_name = map[int32]string{
		0: "CONTENT_TYPE_UNSPECIFIED",
		1: "ARTICLE",
		2: "IMAGE",
		3: "VIDEO",
		4: "GALLERY",
		5: "OEMBED",
		6: "AUTHOR",
		7: "AGENCY",
	}
	Article_ContentType_value = map[string]int32{
		"CONTENT_TYPE_UNSPECIFIED": 0,
		"ARTICLE":                  1,
		"IMAGE":                    2,
		"VIDEO":                    3,
		"GALLERY":                  4,
		"OEMBED":                   5,
		"AUTHOR":                   6,
		"AGENCY":                   7,
	}
)

func (x Article_ContentType) Enum() *Article_ContentType {
	p := new(Article_ContentType)
	*p = x
	return p
}

func (x Article_ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Article_ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[0].Descriptor()
}

func (Article_ContentType) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[0]
}

func (x Article_ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Article_ContentType.Descriptor instead.
func (Article_ContentType) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 0}
}

// Subtype of the article.
type Article_ContentSubType int32

const (
	// Not specified.
	Article_CONTENT_SUB_TYPE_UNSPECIFIED Article_ContentSubType = 0
	// Meldung/Nachricht — this is the default
	Article_NEWS Article_ContentSubType = 1
	// 'Kolumne'
	Article_COLUMN Article_ContentSubType = 2
	// 'Bericht'
	Article_REPORT Article_ContentSubType = 3
	// 'Kommentar'
	Article_COMMENTARY Article_ContentSubType = 4
	// 'Interview'
	Article_INTERVIEW Article_ContentSubType = 5
	// 'Pro und Kontra/Streitgespräch'
	Article_CONTROVERSY Article_ContentSubType = 6
	// 'Reportage'
	Article_STORY Article_ContentSubType = 7
	// 'Rezension/Kritik'
	Article_RECENSION Article_ContentSubType = 8
	// 'Tagesanbruch'
	Article_TAGESANBRUCH Article_ContentSubType = 9
	// 'Analyse'
	Article_ANALYSIS Article_ContentSubType = 10
	// 'Satire/Glosse'
	Article_SATIRE Article_ContentSubType = 11
	// Content originally imported from agency/tickers by the CMS
	Article_AGENCY_IMPORT Article_ContentSubType = 12
)

// Enum value maps for Article_ContentSubType.
var (
	Article_ContentSubType_name = map[int32]string{
		0:  "CONTENT_SUB_TYPE_UNSPECIFIED",
		1:  "NEWS",
		2:  "COLUMN",
		3:  "REPORT",
		4:  "COMMENTARY",
		5:  "INTERVIEW",
		6:  "CONTROVERSY",
		7:  "STORY",
		8:  "RECENSION",
		9:  "TAGESANBRUCH",
		10: "ANALYSIS",
		11: "SATIRE",
		12: "AGENCY_IMPORT",
	}
	Article_ContentSubType_value = map[string]int32{
		"CONTENT_SUB_TYPE_UNSPECIFIED": 0,
		"NEWS":                         1,
		"COLUMN":                       2,
		"REPORT":                       3,
		"COMMENTARY":                   4,
		"INTERVIEW":                    5,
		"CONTROVERSY":                  6,
		"STORY":                        7,
		"RECENSION":                    8,
		"TAGESANBRUCH":                 9,
		"ANALYSIS":                     10,
		"SATIRE":                       11,
		"AGENCY_IMPORT":                12,
	}
)

func (x Article_ContentSubType) Enum() *Article_ContentSubType {
	p := new(Article_ContentSubType)
	*p = x
	return p
}

func (x Article_ContentSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Article_ContentSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[1].Descriptor()
}

func (Article_ContentSubType) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[1]
}

func (x Article_ContentSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Article_ContentSubType.Descriptor instead.
func (Article_ContentSubType) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0, 1}
}

// State of the article in the content management system.
type Metadata_State int32

const (
	// Not specified.
	Metadata_STATE_UNSPECIFIED Metadata_State = 0
	// A published article.
	Metadata_PUBLISHED Metadata_State = 1
)

// Enum value maps for Metadata_State.
var (
	Metadata_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "PUBLISHED",
	}
	Metadata_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"PUBLISHED":         1,
	}
)

func (x Metadata_State) Enum() *Metadata_State {
	p := new(Metadata_State)
	*p = x
	return p
}

func (x Metadata_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metadata_State) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[2].Descriptor()
}

func (Metadata_State) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[2]
}

func (x Metadata_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metadata_State.Descriptor instead.
func (Metadata_State) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{1, 0}
}

// Type of an element.
type Element_ElementType int32

const (
	// Not specified, not supported or yet unknown.
	Element_ELEMENT_TYPE_UNSPECIFIED Element_ElementType = 0
	// An article element.
	Element_ARTICLE Element_ElementType = 1
	// An image element.
	Element_IMAGE Element_ElementType = 2
	// A video element.
	Element_VIDEO Element_ElementType = 3
	// A gallery element.
	Element_GALLERY Element_ElementType = 4
	// An oembed element.
	Element_OEMBED Element_ElementType = 5
	// An author element.
	Element_AUTHOR Element_ElementType = 6
	// An agency (e.g. DPA) element.
	Element_AGENCY Element_ElementType = 7
	// An element that represents a <esi:include>
	Element_EDGE_SIDE_INCLUDE Element_ElementType = 8
	// A citation element.
	Element_CITATION Element_ElementType = 9
)

// Enum value maps for Element_ElementType.
var (
	Element_ElementType_name = map[int32]string{
		0: "ELEMENT_TYPE_UNSPECIFIED",
		1: "ARTICLE",
		2: "IMAGE",
		3: "VIDEO",
		4: "GALLERY",
		5: "OEMBED",
		6: "AUTHOR",
		7: "AGENCY",
		8: "EDGE_SIDE_INCLUDE",
		9: "CITATION",
	}
	Element_ElementType_value = map[string]int32{
		"ELEMENT_TYPE_UNSPECIFIED": 0,
		"ARTICLE":                  1,
		"IMAGE":                    2,
		"VIDEO":                    3,
		"GALLERY":                  4,
		"OEMBED":                   5,
		"AUTHOR":                   6,
		"AGENCY":                   7,
		"EDGE_SIDE_INCLUDE":        8,
		"CITATION":                 9,
	}
)

func (x Element_ElementType) Enum() *Element_ElementType {
	p := new(Element_ElementType)
	*p = x
	return p
}

func (x Element_ElementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Element_ElementType) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[3].Descriptor()
}

func (Element_ElementType) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[3]
}

func (x Element_ElementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Element_ElementType.Descriptor instead.
func (Element_ElementType) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{2, 0}
}

// Relation or usage of an element
type Element_ElementRelation int32

const (
	// Not specified.
	Element_ELEMENT_RELATION_UNSPECIFIED Element_ElementRelation = 0
	// As an opener element
	Element_OPENER Element_ElementRelation = 1
	// As an teaser element
	Element_TEASER Element_ElementRelation = 2
)

// Enum value maps for Element_ElementRelation.
var (
	Element_ElementRelation_name = map[int32]string{
		0: "ELEMENT_RELATION_UNSPECIFIED",
		1: "OPENER",
		2: "TEASER",
	}
	Element_ElementRelation_value = map[string]int32{
		"ELEMENT_RELATION_UNSPECIFIED": 0,
		"OPENER":                       1,
		"TEASER":                       2,
	}
)

func (x Element_ElementRelation) Enum() *Element_ElementRelation {
	p := new(Element_ElementRelation)
	*p = x
	return p
}

func (x Element_ElementRelation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Element_ElementRelation) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[4].Descriptor()
}

func (Element_ElementRelation) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[4]
}

func (x Element_ElementRelation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Element_ElementRelation.Descriptor instead.
func (Element_ElementRelation) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{2, 1}
}

// Type of an asset.
type Asset_AssetType int32

const (
	// Not specified.
	Asset_ASSET_TYPE_UNSPECIFIED Asset_AssetType = 0
	// An image asset.
	Asset_IMAGE Asset_AssetType = 1
	// A video asset.
	Asset_VIDEO Asset_AssetType = 2
	// An URL asset.
	Asset_URL Asset_AssetType = 3
	// A metadata asset.
	Asset_METADATA Asset_AssetType = 4
)

// Enum value maps for Asset_AssetType.
var (
	Asset_AssetType_name = map[int32]string{
		0: "ASSET_TYPE_UNSPECIFIED",
		1: "IMAGE",
		2: "VIDEO",
		3: "URL",
		4: "METADATA",
	}
	Asset_AssetType_value = map[string]int32{
		"ASSET_TYPE_UNSPECIFIED": 0,
		"IMAGE":                  1,
		"VIDEO":                  2,
		"URL":                    3,
		"METADATA":               4,
	}
)

func (x Asset_AssetType) Enum() *Asset_AssetType {
	p := new(Asset_AssetType)
	*p = x
	return p
}

func (x Asset_AssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Asset_AssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_stroeer_core_v1_article_proto_enumTypes[5].Descriptor()
}

func (Asset_AssetType) Type() protoreflect.EnumType {
	return &file_stroeer_core_v1_article_proto_enumTypes[5]
}

func (x Asset_AssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Asset_AssetType.Descriptor instead.
func (Asset_AssetType) EnumDescriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{3, 0}
}

// An article represents a piece of content created in the content management
// system. Different types of content like text or video articles share
// the same message structure distinguished by the `Article.type` field.
//
// Depending on the service used to retrieve an article, this message might
// only contain data required on section pages (e.g. with `Article.body` set to `null`
// thus not containing any data that is only required on detail pages). This is sometimes
// referred to as _Teaser_.
//
// Message fields and map entries are optional unless commented otherwise.
type Article struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the article defined by the content management system (required).
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Main content type of the article.
	Type Article_ContentType `protobuf:"varint,2,opt,name=type,proto3,enum=stroeer.core.v1.Article_ContentType" json:"type,omitempty"`
	// Subtype of the article. For `CONTENT_TYPE_ARTICLE` this field holds a
	// sub type, for others like `CONTENT_TYPE_GALLERY` it may not.
	SubType Article_ContentSubType `protobuf:"varint,3,opt,name=sub_type,json=subType,proto3,enum=stroeer.core.v1.Article_ContentSubType" json:"sub_type,omitempty"`
	// Hierarchical section tree information of the article (required).
	// For example:
	// `/` -> `/sport/` -> `/sport/fussball/`
	SectionTree *Reference `protobuf:"bytes,4,opt,name=section_tree,json=sectionTree,proto3" json:"section_tree,omitempty"`
	// Generic map containing general content and configuration information of
	// the article (required).
	//
	// The entry set is defined by the content management system and
	// will vary depending on the main type of the article.
	//
	// For `CONTENT_TYPE_ARTICLE`, this map will always contain non empty values
	// for the following keys:
	//
	// * `ref_path`: URL path for this article e.g. /section/id_$ID/title.html
	// * `ref_canonical`: Canonical URL of this article, may differ if external, e.g. https://www.giga.de/external.html
	// * `ref_amp`: AMP URL of this article
	// * `headline`
	// * `top_line`
	// * `summary`
	//
	// For `CONTENT_TYPE_GALLERY`, this map will always contain non empty values
	// for the following keys:
	//
	// * headline
	//
	// Clients must be resilient to unknown or missing entry sets.
	Fields map[string]string `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Recursive body structure of the article to render on detail
	// pages.
	//
	// This message will be empty for the teaser representation (e.g. section pages) of the article.
	Body *Body `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`
	// Article metadata like publication state and technical timestamps.
	Metadata *Metadata `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Elements of the article which are not part of the body, e.g. author information
	// opener image/video etc. Those elements should be used to render the article
	// as a teaser e.g. on section pages.
	Elements []*Element `protobuf:"bytes,8,rep,name=elements,proto3" json:"elements,omitempty"`
	// Extracted entities from the article body like people, places, organizations etc.
	Keywords []string `protobuf:"bytes,9,rep,name=keywords,proto3" json:"keywords,omitempty"`
	// IDs of articles related to this article.
	//
	// Related articles are defined manually in the content management system
	// by the editorial department.
	Onwards []int64 `protobuf:"varint,10,rep,packed,name=onwards,proto3" json:"onwards,omitempty"`
}

func (x *Article) Reset() {
	*x = Article{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article) ProtoMessage() {}

func (x *Article) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article.ProtoReflect.Descriptor instead.
func (*Article) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{0}
}

func (x *Article) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Article) GetType() Article_ContentType {
	if x != nil {
		return x.Type
	}
	return Article_CONTENT_TYPE_UNSPECIFIED
}

func (x *Article) GetSubType() Article_ContentSubType {
	if x != nil {
		return x.SubType
	}
	return Article_CONTENT_SUB_TYPE_UNSPECIFIED
}

func (x *Article) GetSectionTree() *Reference {
	if x != nil {
		return x.SectionTree
	}
	return nil
}

func (x *Article) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Article) GetBody() *Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Article) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Article) GetElements() []*Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *Article) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *Article) GetOnwards() []int64 {
	if x != nil {
		return x.Onwards
	}
	return nil
}

// Article metadata like publication state and technical timestamps.
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// State of the article in the content management system.
	State Metadata_State `protobuf:"varint,1,opt,name=state,proto3,enum=stroeer.core.v1.Metadata_State" json:"state,omitempty"`
	// Manually set editorial timestamp ('Gültig von') at which the article is valid to deliver on
	// digital platforms in seconds of UTC time since Unix epoch.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Manually set editorial date ('Gültig bis') till the article is valid to deliver on
	// digital platforms in seconds of UTC time since Unix epoch.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Editorial date ('Publikationsdatum') of the first publication of the
	// article in seconds of UTC time since Unix epoch.
	//
	// This date will be set automatically by the content management system.
	PublishTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=publish_time,json=publishTime,proto3" json:"publish_time,omitempty"`
	// Editorial date ('Aktualisierungsdatum') at which the article
	// was updated in seconds of UTC time since Unix epoch.
	//
	// On first publication this timestamp matches `publish_time`. Afterwards
	// it's either updated manually in the content management system or
	// automatically if the article content changed significantly.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Technical timestamp at which the article was transformed in the
	// API layer in seconds of UTC time since Unix epoch.
	TransformationTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=transformation_time,json=transformationTime,proto3" json:"transformation_time,omitempty"`
	// Number of errors occurred while fetching and/or transforming optional
	// article components (e.g. embeds) to an `article` message.
	TransformationErrors int64 `protobuf:"varint,7,opt,name=transformation_errors,json=transformationErrors,proto3" json:"transformation_errors,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{1}
}

func (x *Metadata) GetState() Metadata_State {
	if x != nil {
		return x.State
	}
	return Metadata_STATE_UNSPECIFIED
}

func (x *Metadata) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Metadata) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Metadata) GetPublishTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishTime
	}
	return nil
}

func (x *Metadata) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Metadata) GetTransformationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransformationTime
	}
	return nil
}

func (x *Metadata) GetTransformationErrors() int64 {
	if x != nil {
		return x.TransformationErrors
	}
	return 0
}

// Elements of the article which are not part of the body, e.g. author information
// opener image/video etc. Those elements should be used to render the article
// as a teaser e.g. on section pages.
//
// Different types of elements like images or videos share
// the same message structure distinguished by the `ElementType` field.
type Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the element.
	Type Element_ElementType `protobuf:"varint,1,opt,name=type,proto3,enum=stroeer.core.v1.Element_ElementType" json:"type,omitempty"`
	// The usages (relations) of an element.
	// Example:
	// One image element with the relations `teaser` and `opener` is used for
	// both places.
	Relations []Element_ElementRelation `protobuf:"varint,2,rep,packed,name=relations,proto3,enum=stroeer.core.v1.Element_ElementRelation" json:"relations,omitempty"`
	// Assets of the element like images, videos or metadata (required).
	Assets []*Asset `protobuf:"bytes,3,rep,name=assets,proto3" json:"assets,omitempty"`
	// Children of the element.
	Children []*Element `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *Element) Reset() {
	*x = Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Element) ProtoMessage() {}

func (x *Element) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Element.ProtoReflect.Descriptor instead.
func (*Element) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{2}
}

func (x *Element) GetType() Element_ElementType {
	if x != nil {
		return x.Type
	}
	return Element_ELEMENT_TYPE_UNSPECIFIED
}

func (x *Element) GetRelations() []Element_ElementRelation {
	if x != nil {
		return x.Relations
	}
	return nil
}

func (x *Element) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *Element) GetChildren() []*Element {
	if x != nil {
		return x.Children
	}
	return nil
}

// Asset of an element.
type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the asset.
	Type Asset_AssetType `protobuf:"varint,1,opt,name=type,proto3,enum=stroeer.core.v1.Asset_AssetType" json:"type,omitempty"`
	// Generic map containing general content and configuration information of
	// the asset.
	//
	// Depending on the type of the asset, this map will contain different
	// entry sets, e.g. `source`, `width` and `height` for images.
	//
	// Clients must be resilient to unknown or missing entry sets.
	Fields map[string]string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Technical metadata of the asset.
	Metadata *Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{3}
}

func (x *Asset) GetType() Asset_AssetType {
	if x != nil {
		return x.Type
	}
	return Asset_ASSET_TYPE_UNSPECIFIED
}

func (x *Asset) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Asset) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Body of the article to render on detail pages.
type Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Recursive Body nodes.
	Children []*BodyNode `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *Body) Reset() {
	*x = Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body) ProtoMessage() {}

func (x *Body) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body.ProtoReflect.Descriptor instead.
func (*Body) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{4}
}

func (x *Body) GetChildren() []*BodyNode {
	if x != nil {
		return x.Children
	}
	return nil
}

// Recursive body structure representing all types of possible
// body nodes inside an article.
//
// Clients must be resilient to unknown or missing nodes.
type BodyNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the node (required):
	//
	// * `text`
	// * `p`
	// * `sub_headline`
	// * `a`
	// * `strong`
	// * `em`
	// * `br`
	// * `ul`
	// * `ol`
	// * `li`
	// * `img`: inline image element
	// * `oembed`: inline oEmbed element
	// * `article_sources`: "Quellenapparat"
	// * `article_source`: A single "Quellenapparat" item containing `text` or `a`
	// * `disclaimer`: formatted text that holds a (health) disclaimer, e.g. used in `/gesundheit/`
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Text of the node, only set for text nodes (`type == 'text'`).
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// Additional information for the node depending on it's type,
	// e.g. `href` for `a` nodes.
	Fields map[string]string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Children of the node, e.g. the `text` of a `p`.
	Children []*BodyNode `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
	// Elements of the node, e.g. inline videos or galleries.
	Elements []*Element `protobuf:"bytes,5,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *BodyNode) Reset() {
	*x = BodyNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stroeer_core_v1_article_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyNode) ProtoMessage() {}

func (x *BodyNode) ProtoReflect() protoreflect.Message {
	mi := &file_stroeer_core_v1_article_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyNode.ProtoReflect.Descriptor instead.
func (*BodyNode) Descriptor() ([]byte, []int) {
	return file_stroeer_core_v1_article_proto_rawDescGZIP(), []int{5}
}

func (x *BodyNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BodyNode) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *BodyNode) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *BodyNode) GetChildren() []*BodyNode {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *BodyNode) GetElements() []*Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

var File_stroeer_core_v1_article_proto protoreflect.FileDescriptor

var file_stroeer_core_v1_article_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xfe, 0x06, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x6f,
	0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x72,
	0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6e,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x6e, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x7f, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x47, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06,
	0x4f, 0x45, 0x4d, 0x42, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x55, 0x54, 0x48,
	0x4f, 0x52, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x07,
	0x22, 0xdd, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x45, 0x57, 0x53, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4d, 0x4d, 0x45,
	0x4e, 0x54, 0x41, 0x52, 0x59, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x56, 0x49, 0x45, 0x57, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f,
	0x56, 0x45, 0x52, 0x53, 0x59, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x4f, 0x52, 0x59,
	0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x08, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41, 0x47, 0x45, 0x53, 0x41, 0x4e, 0x42, 0x52, 0x55, 0x43,
	0x48, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x10,
	0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x41, 0x54, 0x49, 0x52, 0x45, 0x10, 0x0b, 0x12, 0x11, 0x0a,
	0x0d, 0x41, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x0c,
	0x22, 0xe0, 0x03, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73,
	0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x22, 0x2d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45,
	0x44, 0x10, 0x01, 0x22, 0xe5, 0x03, 0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73,
	0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x0b, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x41, 0x4c, 0x4c,
	0x45, 0x52, 0x59, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x45, 0x4d, 0x42, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x44, 0x47,
	0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x10, 0x08,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x22, 0x4b,
	0x0a, 0x0f, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x45, 0x4e, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x54, 0x45, 0x41, 0x53, 0x45, 0x52, 0x10, 0x02, 0x22, 0xc1, 0x02, 0x0a, 0x05,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74,
	0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x6f,
	0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x39,
	0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x54, 0x0a, 0x09, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x04, 0x22,
	0x3d, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x6f,
	0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x99,
	0x02, 0x0a, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74,
	0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a,
	0x39, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x48, 0x0a, 0x12, 0x64, 0x65,
	0x2e, 0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x70, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f,
	0x73, 0x74, 0x72, 0x6f, 0x65, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x3b,
	0x63, 0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stroeer_core_v1_article_proto_rawDescOnce sync.Once
	file_stroeer_core_v1_article_proto_rawDescData = file_stroeer_core_v1_article_proto_rawDesc
)

func file_stroeer_core_v1_article_proto_rawDescGZIP() []byte {
	file_stroeer_core_v1_article_proto_rawDescOnce.Do(func() {
		file_stroeer_core_v1_article_proto_rawDescData = protoimpl.X.CompressGZIP(file_stroeer_core_v1_article_proto_rawDescData)
	})
	return file_stroeer_core_v1_article_proto_rawDescData
}

var file_stroeer_core_v1_article_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_stroeer_core_v1_article_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_stroeer_core_v1_article_proto_goTypes = []interface{}{
	(Article_ContentType)(0),      // 0: stroeer.core.v1.Article.ContentType
	(Article_ContentSubType)(0),   // 1: stroeer.core.v1.Article.ContentSubType
	(Metadata_State)(0),           // 2: stroeer.core.v1.Metadata.State
	(Element_ElementType)(0),      // 3: stroeer.core.v1.Element.ElementType
	(Element_ElementRelation)(0),  // 4: stroeer.core.v1.Element.ElementRelation
	(Asset_AssetType)(0),          // 5: stroeer.core.v1.Asset.AssetType
	(*Article)(nil),               // 6: stroeer.core.v1.Article
	(*Metadata)(nil),              // 7: stroeer.core.v1.Metadata
	(*Element)(nil),               // 8: stroeer.core.v1.Element
	(*Asset)(nil),                 // 9: stroeer.core.v1.Asset
	(*Body)(nil),                  // 10: stroeer.core.v1.Body
	(*BodyNode)(nil),              // 11: stroeer.core.v1.BodyNode
	nil,                           // 12: stroeer.core.v1.Article.FieldsEntry
	nil,                           // 13: stroeer.core.v1.Asset.FieldsEntry
	nil,                           // 14: stroeer.core.v1.BodyNode.FieldsEntry
	(*Reference)(nil),             // 15: stroeer.core.v1.Reference
	(*timestamppb.Timestamp)(nil), // 16: google.protobuf.Timestamp
}
var file_stroeer_core_v1_article_proto_depIdxs = []int32{
	0,  // 0: stroeer.core.v1.Article.type:type_name -> stroeer.core.v1.Article.ContentType
	1,  // 1: stroeer.core.v1.Article.sub_type:type_name -> stroeer.core.v1.Article.ContentSubType
	15, // 2: stroeer.core.v1.Article.section_tree:type_name -> stroeer.core.v1.Reference
	12, // 3: stroeer.core.v1.Article.fields:type_name -> stroeer.core.v1.Article.FieldsEntry
	10, // 4: stroeer.core.v1.Article.body:type_name -> stroeer.core.v1.Body
	7,  // 5: stroeer.core.v1.Article.metadata:type_name -> stroeer.core.v1.Metadata
	8,  // 6: stroeer.core.v1.Article.elements:type_name -> stroeer.core.v1.Element
	2,  // 7: stroeer.core.v1.Metadata.state:type_name -> stroeer.core.v1.Metadata.State
	16, // 8: stroeer.core.v1.Metadata.start_time:type_name -> google.protobuf.Timestamp
	16, // 9: stroeer.core.v1.Metadata.end_time:type_name -> google.protobuf.Timestamp
	16, // 10: stroeer.core.v1.Metadata.publish_time:type_name -> google.protobuf.Timestamp
	16, // 11: stroeer.core.v1.Metadata.update_time:type_name -> google.protobuf.Timestamp
	16, // 12: stroeer.core.v1.Metadata.transformation_time:type_name -> google.protobuf.Timestamp
	3,  // 13: stroeer.core.v1.Element.type:type_name -> stroeer.core.v1.Element.ElementType
	4,  // 14: stroeer.core.v1.Element.relations:type_name -> stroeer.core.v1.Element.ElementRelation
	9,  // 15: stroeer.core.v1.Element.assets:type_name -> stroeer.core.v1.Asset
	8,  // 16: stroeer.core.v1.Element.children:type_name -> stroeer.core.v1.Element
	5,  // 17: stroeer.core.v1.Asset.type:type_name -> stroeer.core.v1.Asset.AssetType
	13, // 18: stroeer.core.v1.Asset.fields:type_name -> stroeer.core.v1.Asset.FieldsEntry
	7,  // 19: stroeer.core.v1.Asset.metadata:type_name -> stroeer.core.v1.Metadata
	11, // 20: stroeer.core.v1.Body.children:type_name -> stroeer.core.v1.BodyNode
	14, // 21: stroeer.core.v1.BodyNode.fields:type_name -> stroeer.core.v1.BodyNode.FieldsEntry
	11, // 22: stroeer.core.v1.BodyNode.children:type_name -> stroeer.core.v1.BodyNode
	8,  // 23: stroeer.core.v1.BodyNode.elements:type_name -> stroeer.core.v1.Element
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_stroeer_core_v1_article_proto_init() }
func file_stroeer_core_v1_article_proto_init() {
	if File_stroeer_core_v1_article_proto != nil {
		return
	}
	file_stroeer_core_v1_shared_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_stroeer_core_v1_article_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stroeer_core_v1_article_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stroeer_core_v1_article_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stroeer_core_v1_article_proto_goTypes,
		DependencyIndexes: file_stroeer_core_v1_article_proto_depIdxs,
		EnumInfos:         file_stroeer_core_v1_article_proto_enumTypes,
		MessageInfos:      file_stroeer_core_v1_article_proto_msgTypes,
	}.Build()
	File_stroeer_core_v1_article_proto = out.File
	file_stroeer_core_v1_article_proto_rawDesc = nil
	file_stroeer_core_v1_article_proto_goTypes = nil
	file_stroeer_core_v1_article_proto_depIdxs = nil
}
