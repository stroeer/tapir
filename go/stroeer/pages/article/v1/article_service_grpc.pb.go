// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package article

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ArticlePageServiceClient is the client API for ArticlePageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticlePageServiceClient interface {
	GetArticlePage(ctx context.Context, in *GetArticlePageRequest, opts ...grpc.CallOption) (*GetArticlePageResponse, error)
}

type articlePageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArticlePageServiceClient(cc grpc.ClientConnInterface) ArticlePageServiceClient {
	return &articlePageServiceClient{cc}
}

func (c *articlePageServiceClient) GetArticlePage(ctx context.Context, in *GetArticlePageRequest, opts ...grpc.CallOption) (*GetArticlePageResponse, error) {
	out := new(GetArticlePageResponse)
	err := c.cc.Invoke(ctx, "/stroeer.pages.article.v1.ArticlePageService/GetArticlePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticlePageServiceServer is the server API for ArticlePageService service.
// All implementations must embed UnimplementedArticlePageServiceServer
// for forward compatibility
type ArticlePageServiceServer interface {
	GetArticlePage(context.Context, *GetArticlePageRequest) (*GetArticlePageResponse, error)
	mustEmbedUnimplementedArticlePageServiceServer()
}

// UnimplementedArticlePageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArticlePageServiceServer struct {
}

func (UnimplementedArticlePageServiceServer) GetArticlePage(context.Context, *GetArticlePageRequest) (*GetArticlePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticlePage not implemented")
}
func (UnimplementedArticlePageServiceServer) mustEmbedUnimplementedArticlePageServiceServer() {}

// UnsafeArticlePageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticlePageServiceServer will
// result in compilation errors.
type UnsafeArticlePageServiceServer interface {
	mustEmbedUnimplementedArticlePageServiceServer()
}

func RegisterArticlePageServiceServer(s *grpc.Server, srv ArticlePageServiceServer) {
	s.RegisterService(&_ArticlePageService_serviceDesc, srv)
}

func _ArticlePageService_GetArticlePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticlePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlePageServiceServer).GetArticlePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stroeer.pages.article.v1.ArticlePageService/GetArticlePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlePageServiceServer).GetArticlePage(ctx, req.(*GetArticlePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArticlePageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stroeer.pages.article.v1.ArticlePageService",
	HandlerType: (*ArticlePageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArticlePage",
			Handler:    _ArticlePageService_GetArticlePage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stroeer/pages/article/v1/article_service.proto",
}
