// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package section

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SectionPageServiceClient is the client API for SectionPageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SectionPageServiceClient interface {
	GetSectionPage(ctx context.Context, in *GetSectionPageRequest, opts ...grpc.CallOption) (*GetSectionPageResponse, error)
}

type sectionPageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSectionPageServiceClient(cc grpc.ClientConnInterface) SectionPageServiceClient {
	return &sectionPageServiceClient{cc}
}

var sectionPageServiceGetSectionPageStreamDesc = &grpc.StreamDesc{
	StreamName: "GetSectionPage",
}

func (c *sectionPageServiceClient) GetSectionPage(ctx context.Context, in *GetSectionPageRequest, opts ...grpc.CallOption) (*GetSectionPageResponse, error) {
	out := new(GetSectionPageResponse)
	err := c.cc.Invoke(ctx, "/stroeer.pages.section.v1.SectionPageService/GetSectionPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SectionPageServiceService is the service API for SectionPageService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterSectionPageServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type SectionPageServiceService struct {
	GetSectionPage func(context.Context, *GetSectionPageRequest) (*GetSectionPageResponse, error)
}

func (s *SectionPageServiceService) getSectionPage(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.GetSectionPage == nil {
		return nil, status.Errorf(codes.Unimplemented, "method GetSectionPage not implemented")
	}
	in := new(GetSectionPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetSectionPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/stroeer.pages.section.v1.SectionPageService/GetSectionPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetSectionPage(ctx, req.(*GetSectionPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterSectionPageServiceService registers a service implementation with a gRPC server.
func RegisterSectionPageServiceService(s grpc.ServiceRegistrar, srv *SectionPageServiceService) {
	sd := grpc.ServiceDesc{
		ServiceName: "stroeer.pages.section.v1.SectionPageService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "GetSectionPage",
				Handler:    srv.getSectionPage,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "stroeer/pages/section/v1/section_service.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewSectionPageServiceService creates a new SectionPageServiceService containing the
// implemented methods of the SectionPageService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewSectionPageServiceService(s interface{}) *SectionPageServiceService {
	ns := &SectionPageServiceService{}
	if h, ok := s.(interface {
		GetSectionPage(context.Context, *GetSectionPageRequest) (*GetSectionPageResponse, error)
	}); ok {
		ns.GetSectionPage = h.GetSectionPage
	}
	return ns
}

// UnstableSectionPageServiceService is the service API for SectionPageService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableSectionPageServiceService interface {
	GetSectionPage(context.Context, *GetSectionPageRequest) (*GetSectionPageResponse, error)
}
