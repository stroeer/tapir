// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package section

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SectionPageServiceClient is the client API for SectionPageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SectionPageServiceClient interface {
	GetSectionPage(ctx context.Context, in *GetSectionPageRequest, opts ...grpc.CallOption) (*GetSectionPageResponse, error)
}

type sectionPageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSectionPageServiceClient(cc grpc.ClientConnInterface) SectionPageServiceClient {
	return &sectionPageServiceClient{cc}
}

func (c *sectionPageServiceClient) GetSectionPage(ctx context.Context, in *GetSectionPageRequest, opts ...grpc.CallOption) (*GetSectionPageResponse, error) {
	out := new(GetSectionPageResponse)
	err := c.cc.Invoke(ctx, "/stroeer.pages.section.v1.SectionPageService/GetSectionPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SectionPageServiceServer is the server API for SectionPageService service.
// All implementations must embed UnimplementedSectionPageServiceServer
// for forward compatibility
type SectionPageServiceServer interface {
	GetSectionPage(context.Context, *GetSectionPageRequest) (*GetSectionPageResponse, error)
	mustEmbedUnimplementedSectionPageServiceServer()
}

// UnimplementedSectionPageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSectionPageServiceServer struct {
}

func (UnimplementedSectionPageServiceServer) GetSectionPage(context.Context, *GetSectionPageRequest) (*GetSectionPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSectionPage not implemented")
}
func (UnimplementedSectionPageServiceServer) mustEmbedUnimplementedSectionPageServiceServer() {}

// UnsafeSectionPageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SectionPageServiceServer will
// result in compilation errors.
type UnsafeSectionPageServiceServer interface {
	mustEmbedUnimplementedSectionPageServiceServer()
}

func RegisterSectionPageServiceServer(s *grpc.Server, srv SectionPageServiceServer) {
	s.RegisterService(&_SectionPageService_serviceDesc, srv)
}

func _SectionPageService_GetSectionPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSectionPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectionPageServiceServer).GetSectionPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stroeer.pages.section.v1.SectionPageService/GetSectionPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectionPageServiceServer).GetSectionPage(ctx, req.(*GetSectionPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SectionPageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stroeer.pages.section.v1.SectionPageService",
	HandlerType: (*SectionPageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSectionPage",
			Handler:    _SectionPageService_GetSectionPage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stroeer/pages/section/v1/section_service.proto",
}
